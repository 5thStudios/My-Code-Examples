@using Dragonfly.UmbracoHelpers
@using www.Models.PublishedModels;
@using ContentModels = www.Models.PublishedModels;
@using www.Models;
@using www.ViewModels;
@using www.Models.LiveSkuModel;
@inject IPublishedValueFallback PublishedValueFallback
@model ComposedPageViewModel<ContentModels.LiveSkuChart, LiveSkuChartViewModel>
@{
    //Determine proper toplevel to use.
    if (Model.ViewModel.IsPerdue)
    {
        Layout = Common.Layout.TopLevelPER;
    }
    else if (Model.ViewModel.IsCheney)
    {
        Layout = Common.Layout.TopLevelCHE;
    }
    else if (Model.ViewModel.IsColeman)
    {
        Layout = Common.Layout.TopLevelCOL;
    }


    //Instantiate class variables
    String productType = "";
    String CvpType = "";

}
@section Header {
    <link rel="stylesheet" type="text/css" href="/CSS/foundation.css?v=02" />
    <link rel="stylesheet" type="text/css" href="/CSS/live-sku-chart.css?v=22" />
    <script type="text/javascript" src="~/Scripts/jquery.session.js"></script>
    <script type="text/javascript" src="~/Scripts/foundation.js"></script>
    <script type="text/javascript" src="~/Scripts/app.js"></script>
}



<div class="LiveSkuChart">
    <partial name="@Common.Partial.HeroCarousel" model="Model.Page?.HeroSlides" view-data='@new ViewDataDictionary(ViewData) { { "ipPage", Model.Page } }' />

    <div class="logo-banner @Model.ViewModel.BrandType.ToLower().Replace(" ","-").Replace("&","-")">
        @if (Model.Page?.Logo != null)
        {
            <a href="@Model.Page?.NavigateTo.Url()" target="_blank" rel="noopener noreferrer">
                <img alt="" src="@Model.Page?.Logo.Url()" />
            </a>
        }

        @if (Model.Page?.SecondaryLogo != null)
        {
            <a href="@Model.Page?.SecondaryNavigateTo.Url()" target="_blank" rel="noopener noreferrer">
                <span class="show-for-medium">&nbsp;&nbsp;&nbsp;</span>
                <br class="hide-for-medium" />
                <img alt="" src="@Model.Page?.SecondaryLogo.Url()" />
            </a>
        }

        @if (Model.Page?.TextAfterLogos != null && !string.IsNullOrEmpty(Model.Page?.TextAfterLogos))
        {
            <span class="hide-for-small-only">&nbsp;&nbsp;</span>

            @Model.Page?.TextAfterLogos
        }
    </div>

    <div class="umb-grid layout-Full-width liveSkuChart @Model.ViewModel.BrandType.ToLower().Replace(" ","-").Replace("&","-")">
        <div class="grid-container">
            <br>
            <div class="grid-x">
                <div class="cell">
                    <h2>@Model.Page?.Title</h2>

                    <div class="table">
                        @foreach (LiveSkuGroup _group in Model.ViewModel.SkuGroups)
                        {
                            //  FILTER TYPES
                            //======================================
                            //	All
                            //	Harvestland
                            //	Perdue NAE
                            //	Perdue
                            //	Kings Delight
                            //	Shenandoah

                            @*switch (Model.ViewModel.BrandId)
                        {
                        case "Perdue NAE":
                        @CreateSkuGroup_NAE(_group)
                        break;
                        default:
                        @CreateSkuGroup(_group)
                        break;
                        }*@

                            CreateSkuGroup(_group);
                        }
                    </div>

                    <div class="grid-x">
                        <div class="cell chart-date text-right">
                            <div>Effective:&nbsp;&nbsp;@DateTime.Today.ToShortDateString()</div>
                            <br /><br />
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>


</div>






@{
    void CreateSkuHeader()
    {
        <div class="header grid-x">
            <div class="cell small-6 laptop-3 large-2 text-center">
                <div>PRODUCT<br />CODE</div>
            </div>

            <div class="cell small-6 laptop-3 large-2 text-center">
                <div>PRODUCT STORAGE</div>
            </div>

            <div class="cell laptop-11 large-13 show-for-laptop text-center hide-for-small-only">
                <div class="print-pad-top">PRODUCT DESCRIPTION</div>
            </div>

            <div class="cell small-6 laptop-4 large-4 text-center">
                <div>AVG<br />PIECE SIZE</div>
            </div>

            <div class="cell small-6 laptop-3 large-3 text-center">
                <div>AVG CASE<br />WEIGHT</div>
            </div>
        </div>
    }

    void CreateSkuRecord(LiveSku _sku)
    {
        <div class="content grid-x sku-record">

            <div class="cell small-6 laptop-3 large-2 text-center    small-order-1 laptop-order-1   noPadding">
                <div>
                    <a href="@_sku.Url" target="_blank" rel="noopener noreferrer">@_sku.ProductCode</a>
                </div>
            </div>

            <div class="cell small-6 laptop-3 large-2 text-center    small-order-2 laptop-order-2   noPadding">
                <div>
                    @_sku.Attribute
                </div>
            </div>
            <div class="cell small-24 laptop-11 large-13 text-left    small-order-5 laptop-order-3">
                <div>
                    @Html.Raw(_sku.ProductDescription)
                </div>
            </div>

            <div class="cell small-6 laptop-4 large-4 text-center    small-order-3 laptop-order-4   noPadding">
                <div>@_sku.ServingSize</div>
            </div>

            <div class="cell small-6 laptop-3 large-3 text-center    small-order-4 laptop-order-6   noPadding">
                <div>@_sku.AverageWeight lbs</div>
            </div>


        </div>
    }

    void CreateSkuGroup(LiveSkuGroup _group)
    {
        <br />
        <br />

        <div class="category grid-x">
            <div class="cell ">
                <div>
                    @Html.Raw(_group.GroupName)
                </div>
            </div>
        </div>
        CreateSkuHeader();


        foreach (LiveSku _sku in _group.LstLiveSkus)
        {
            //SKIP IF THE FOLLOWING IS TRUE
            if (_sku.ProductType == "Fresh Chicken (CVP products limited distribution)")
            {
                continue;
            }

            //Add product type if needed.
            if (_sku.ProductType != productType)
            {
                productType = _sku.ProductType;

                <div class="subcategory grid-x">
                    <div class="cell">
                        <div>
                            @productType
                        </div>
                    </div>
                </div>
            }

            CreateSkuRecord(_sku);
        }


        //ONLY SHOW FRESH CHICKEN AT END IF FILTERING THE CHICKEN GROUP
        //if (_group.GroupName == "CHICKEN")
        //{
        foreach (LiveSku _sku in _group.LstLiveSkus.Where(x => x.ProductType == "Fresh Chicken (CVP products limited distribution)").OrderBy(x => x.LstCVPSubtypes.FirstOrDefault()))
        {
            //Add product type if needed.
            if (_sku.ProductType != productType)
            {
                productType = _sku.ProductType;

                <div class="subcategory grid-x">
                    <div class="cell">
                        <div>
                            @productType
                        </div>
                    </div>
                </div>
            }
            if (_sku.LstCVPSubtypes.FirstOrDefault() != CvpType)
            {
                CvpType = _sku.LstCVPSubtypes.FirstOrDefault();

                <div class="subcategory cvp grid-x">
                    <div class="cell">
                        <div>
                            @CvpType
                        </div>
                    </div>
                </div>
            }

            CreateSkuRecord(_sku);
        }
        //}

    }
}