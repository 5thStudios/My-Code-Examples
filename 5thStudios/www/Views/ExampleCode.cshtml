@*================================================================================*@
@*
    This option bypasses the purpose of U8' @Html.RenderAction entirely.

    *In U8 we would create a view, then call @Html.RenderAction to go to a controller
    and then returned data to a partial view.

    *In U9 we no longer have partial views.  Instead every doctype has its own
    RenderController.Index().  We can simply override this function and return any data
    as long as the receiving view has a matching Model to the incoming data.  Note:
    to override this function you will need to add a RenderController with a matching
    name to your doctype.
    When returning to a view, there are 3 options:

    return View(object);  //Returns to a view based on the folder matching the doctype name.  ex:  ~/View/[NAME]/Index.cshtml
    return View("~/Views/[NAME].cshtml", object);  //Calls a specific view and passes the needed data.
    return CurrentTemplate(object);  //Works just like the View() method but returns an ActionResult.  Not sure what the difference is.

    In the view, add the returning object to the 'inherits' or replace the 'inherits' with 'model = object';
    inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<object>
*@
@*================================================================================*@



@*================================================================================*@
@*
    This block of code acts similar to U8's @Html.RenderAction.
    BUT, using a ViewComponent, it only allows a single public function InvokeAsync()
    and passes an object to the component of the same name.

    Note: The matching component will be found in the following structure:

    Views/Components/[NAME]/Default.cshtml                                        *@
    @await Component.InvokeAsync("Header", Model)
@*================================================================================*@



@*================================================================================*@
@{
    //This block of code will call a static function from a SurfaceController
    Core.ViewModel.Test _testObj = Core.CommonController.StaticTest(Model);
}
    @*  This block of code is the same as U8's @Html.Partial()      *@
    @await Html.PartialAsync("~/Views/Partials/Test3.cshtml", _testObj)
@*================================================================================*@

