@inherits UmbracoViewPage<Models.illuminationStory>



@*@{
    //Redirect to home if illumination settings are not active.
    if (!Controllers.IlluminationController.areIlluminationControlsActivated(Umbraco))
    {
        Response.Redirect(Umbraco.Content((int)(Models.Common.siteNode.Home)).Url());
    }
}*@

@using (Html.BeginUmbracoForm<Controllers.IlluminationController>("UpdateIlluminationStory", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(x => x.memberId);
    @Html.HiddenFor(x => x.storyId);

    <div id="pnlAddEditIlluminationStory">
        <h3>Update Your Illumination Story</h3>
        <br />
        <p>P | Ubuntu 18px- Zombie ipsum reversus ab viral inferno, nam rick grimes malum cerebro. De carne lumbering animata corpora quaeritis. Summus brains sit , morbo vel maleficia? De apocalypsi gorger omero undead survivor dictum mauris. Hi mindless mortuis soulless creaturas, imo evil stalking monstra adventus resi dentevil vultus comedat cere</p>
        <br />
        
        <div class="grid-x">
            <div class="cell">
                @Html.ValidationSummary()
                <br />
                <br />
            </div>
        </div>

        <div class="grid-x grid-padding-x">
            <div class="cell large-22 large-offset-1">
                <div class="grid-x grid-padding-x">
                    <div class="cell large-16">
                        <h4>Title</h4>
                        @*@Html.TextBoxFor(m => m.Title)
                        <h6 class="text-left">@Html.ValidationMessageFor(m => m.Title)</h6>*@
                    </div>
                    <div class="cell large-8">
                        <h4>Author</h4>
                        @Html.Raw(Model.Author)
                    </div>
                </div>
                <br />
                <br />
            </div>
            <div class="cell large-24 experienceTypeSelect">
                <h4 class="text-center">Experience Type</h4>
                <hr />
                <br />

                <div class="grid-x grid-margin-x">
                    <div class="cell large-9 large-offset-3">
                        <label class="Heavenly">@Html.RadioButtonFor(m => m.ExperienceType, "Heavenly") <span>Heavenly</span></label>
                    </div>
                    <div class="cell large-9 large-offset-2">
                        <label class="Hellish">@Html.RadioButtonFor(m => m.ExperienceType, "Hellish") <span>Hellish</span></label>
                    </div>
                    <div class="cell large-9 large-offset-3">
                        <label class="Purgatorial">@Html.RadioButtonFor(m => m.ExperienceType, "Purgatorial") <span>Purgatorial</span></label>
                    </div>
                    <div class="cell large-9 large-offset-2">
                        <label class="OtherUnsure">@Html.RadioButtonFor(m => m.ExperienceType, "OtherorUnsure") <span>Other or Unsure</span></label>
                    </div>
                </div>
                <br />
                <h6 class="text-right">@Html.ValidationMessageFor(m => m.ExperienceType)</h6>
            </div>
        </div>
        <br />
        <br />
        <div class="grid-x grid-padding-x grid-padding-y optionalFieldsPnl">
            <div class="cell large-22 large-offset-1">
                <h4 class="text-center">Optional Fields</h4>
                <hr />
                <p>Info at the time of the event... Statistical data will be generated based on this data.</p>
                <br />
                <div class="grid-x grid-margin-x grid-margin-y optionalFields">
                    <div class="cell large-4">
                        <p>Age</p>
                    </div>
                    <div class="cell large-8">
                        @Html.DropDownListFor(m => m.Age, new SelectList(Model.lstAge))
                    </div>
                    <div class="cell large-4">
                        <p>Gender</p>
                    </div>
                    <div class="cell large-8">
                        @Html.EnumDropDownListFor(m => m.Gender, " ", new SelectList(Enum.GetValues(typeof(Models.Common.Genders))))
                    </div>
                    <div class="cell large-4">
                        <p>Race</p>
                    </div>
                    <div class="cell large-8">
                        @Html.EnumDropDownListFor(m => m.Race, " ", new SelectList(Enum.GetValues(typeof(Models.Common.Races))))
                    </div>
                    <div class="cell large-4">
                        <p>Country</p>
                    </div>
                    <div class="cell large-8">
                        @Html.EnumDropDownListFor(m => m.Country, " ", new SelectList(Enum.GetValues(typeof(Models.Common.Countries))))
                    </div>
                    <div class="cell large-4">
                        <p>Religion</p>
                    </div>
                    <div class="cell large-8">
                        @Html.EnumDropDownListFor(m => m.Religion, " ", new SelectList(Enum.GetValues(typeof(Models.Common.Religions))))
                    </div>
                </div>
                <br />
            </div>
        </div>

        <br />
        <br />
        <div class="grid-x grid-padding-x">
            <div class="cell large-24">
                <h4>Story</h4>
                @Html.TextAreaFor(m => m.Story, 12, 20, null)
                <h6 class="text-right">@Html.ValidationMessageFor(m => m.Story)</h6>
            </div>
        </div>

        <br />
        <br />
        <div class="grid-x  grid-padding-x">
            <div class="cell large-6 large-offset-12">
                <input type="submit" name="Submit" title="Submit" class="button expanded primary" />
            </div>
            <div class="cell large-6">
                <button id="btnCancel" onclick="return false;" class="button primary expanded">Cancel</button>
            </div>
        </div>

    </div>
}