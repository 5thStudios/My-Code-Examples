@using Models;
@inherits UmbracoViewPage<Models.MsgList>



<div class="visionaryMsgList">
    @{Html.RenderPartial("Partials/Common/Pagination", Model.Pagination); }

    <div class="apparitionList">

        <div class="grid-x align-middle grid-padding-x story header">
            <div class="cell small-24 medium-auto show-for-medium">
                <h4>Title</h4>
            </div>
            <div class="cell small-24 medium-shrink author show-for-medium">
                <h4>Date</h4>
            </div>

            <div class="show-for-small-only cell text-center">
                <h4>Messages</h4>
            </div>
        </div>

        @*<hr />
        <h3>Count: @Model.lstMsgLinks.Count</h3>
        @{ Newtonsoft.Json.JsonConvert.SerializeObject(Model);}
        <hr />*@

        @foreach (var msgLink in Model.lstMsgLinks)
        {
            <a href="@msgLink.Url" data-nodeid="@msgLink.Id">
                <div class="grid-x align-middle grid-padding-x story">
                    <div class="cell  small-24 medium-auto small-order-2 medium-order-1">
                        @*<h4>@msgLink.Title @(string.IsNullOrEmpty(msgLink.Subtitle) ? "" : " | " + msgLink.Subtitle )</h4>*@
                        <h4>@msgLink.Title</h4>
                    </div>
                    <div class="cell  small-24 medium-shrink author text-right small-order-1 medium-order-2">
                        @msgLink.Dates 
                    </div>
                </div>
            </a>
        }
    </div>


    <br />
    <br />
    @{Html.RenderPartial("Partials/Common/Pagination", Model.Pagination); }
</div>



@{
    //Instantiate variables
    //int? currentPageId = UmbracoContext.Current.PageId;
    //IEnumerable<IPublishedContent> lstMsgs;
    //IPublishedContent ipCurrentPg;

    ////Obtain current page as strongly typed ip
    //ipCurrentPg = Umbraco.TypedContent(currentPageId);

    ////Obtain a list of all messages
    //lstMsgs = ipCurrentPg.DescendantsOrSelf().Where(x => x.DocumentTypeAlias == Common.docType.Message);
    //var lstMsgs = Model.DescendantsOrSelf().Where(x => x.DocumentTypeAlias == Common.docType.Message);



    ////Create the address string
    //StringBuilder strAddress = new StringBuilder();

    //var jsonStr = Model.Address;

    //strAddress.AppendLine(jsonStr.ToString());

    ////Extract the address
    //List<addressRecord> lstAddressRecord = new JavaScriptSerializer().Deserialize<List<addressRecord>>(jsonStr.ToString());
    ////List<addressRecord> lstAddressRecord = new JavaScriptSerializer().Deserialize<List<addressRecord>>(jsonStr);

    ////foreach (var record in lstAddressRecord)
    ////{
    ////    strAddress.AppendLine(record.address);
    ////    strAddress.AppendLine(record.city);
    ////    strAddress.AppendLine(record.state);
    ////    strAddress.AppendLine(record.postal);
    ////}

    //if (lstAddressRecord != null)
    //{
    //    strAddress.AppendLine(" ||| ");
    //    strAddress.AppendLine(lstAddressRecord.FirstOrDefault().address);
    //    strAddress.AppendLine(" ||| ");
    //    strAddress.AppendLine(lstAddressRecord.FirstOrDefault().city);
    //    strAddress.AppendLine(" ||| ");
    //    strAddress.AppendLine(lstAddressRecord.FirstOrDefault().state);
    //    strAddress.AppendLine(" ||| ");
    //    strAddress.AppendLine(lstAddressRecord.FirstOrDefault().postal);
    //}
}



@*@Model.GetGridHtml(Html, Common.NodeProperties.biography, Common.miscellaneous.Foundation6)*@
