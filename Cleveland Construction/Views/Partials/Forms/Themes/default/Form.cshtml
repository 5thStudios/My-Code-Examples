@using Umbraco.Forms.Core.Enums
@using Umbraco.Forms.Web
@using Umbraco.Forms.Web.Models
@using Umbraco.Forms.Web.Services

@model Umbraco.Forms.Web.Models.FormViewModel

@inject IFormThemeResolver FormThemeResolver

@{
    // here we load in the needed default assets for the form
    // this means that 3rd party themes can override these by implementing their own form.cshtml file
    //it will simply hook into standard way forms load assets
    // if (Model.DisableDefaultStylesheet == false)
    // {
    //     Html.SetFormThemeCssFile("~/App_Plugins/UmbracoForms/Assets/themes/default/style.min.css?JF=01");
    // }
}

<div class="umbraco-forms-page" id="@Model.CurrentPage.Id">

    @if (string.IsNullOrEmpty(Model.CurrentPage.Caption) == false)
    {
        @* <h2 class="umbraco-forms-caption">@Model.CurrentPage.Caption</h2> *@
        <h3 class="umbraco-forms-caption">@Model.CurrentPage.Caption</h3>
    }

    @if (Model.ShowValidationSummary)
    {
        @Html.ValidationSummary(false)
    }


    @foreach (FieldsetViewModel fs in Model.CurrentPage.Fieldsets)
    {
        bool hideFieldSetWhenRendering = fs.HasCondition && fs.ConditionActionType == FieldConditionActionType.Show;

        <div class="umbraco-forms-fieldset@{ if (hideFieldSetWhenRendering) { <text> hide</text>  } }" id="@fs.Id">

            @if (string.IsNullOrEmpty(fs.Caption) == false)
            {
                @* <h3>@fs.Caption</h3>
                <h4>@fs.Caption</h4> *@
                <h5>@fs.Caption</h5>
            }

            <div class="row-fluid">

                @foreach (var c in fs.Containers)
                {
                    string _width = (c.Width * 2).ToString();

                    <div class="umbraco-forms-container cell @("medium-" + @_width)">

                        @foreach (FieldViewModel f in c.Fields)
                        {
                            bool hideFieldWhenRendering = f.HasCondition && f.ConditionActionType == FieldConditionActionType.Show;

                            switch (f.FieldType?.RenderInputType ?? RenderInputType.Single)
                            {
                                case RenderInputType.Single:
                                    <div class="@Html.GetFormFieldWrapperClass(f.FieldTypeName)@f.CssClass @{ if (hideFieldWhenRendering) { <text> hide</text>  } }">

                                        <label for="@f.Id" class="umbraco-forms-label@{ if (f.HideLabel) { <text> hide</text>  } }">
                                            @{
                                                RenderCaption(f);
                                            }
                                        </label>

                                        @{
                                            await RenderField(f);
                                        }

                                    </div>
                                    break;

                                case RenderInputType.Multiple:
                                    <fieldset class="@Html.GetFormFieldWrapperClass(f.FieldTypeName)@f.CssClass @{ if (hideFieldWhenRendering) { <text> hide</text>  } }">

                                        <legend class="umbraco-forms-legend@{ if (f.HideLabel) { <text> hide</text>  } }">
                                            @{
                                                RenderCaption(f);
                                            }
                                        </legend>

                                        @{
                                            await RenderField(f);
                                        }

                                    </fieldset>
                                    break;

                                case RenderInputType.Custom:
                                    @await Html.PartialAsync(FormThemeResolver.GetFieldView(Model, f), f)
                                    break;
                            }
                        }

                    </div>
                }
            </div>

        </div>
    }

    <div class="hide" aria-hidden="true">
        <input type="text" name="@Model.FormId.ToString().Replace("-", "")" />
    </div>

    <div class="grid-x  umbraco-forms-navigation">
        <div class="cell">
            @if (Model.IsMultiPage)
            {
                if (!Model.IsFirstPage)
                {
                    <input class="button prev cancel large"
                           type="submit"
                           value="@Model.PreviousCaption"
                           name="__prev"
                           formnovalidate
                           data-form-navigate="prev"
                           data-umb="prev-forms-form"/>
                }

                if (!Model.IsLastPage)
                {
                    <input type="submit"
                           class="button next  large"
                           value="@Model.NextCaption"
                           name="__next"
                           data-form-navigate="next"
                           data-umb="next-forms-form"/>
                }

                if (Model.IsLastPage)
                {
                    <input type="submit"
                           class="button  large"
                           value="@Model.SubmitCaption"
                           name="__next"
                           data-form-navigate="next"
                           data-umb="submit-forms-form"/>
                }
            }
            else
            {
                <input type="submit"
                       class="button large"
                       value="@Model.SubmitCaption"
                       name="__next"
                       data-form-navigate="next"
                       data-umb="submit-forms-form" />
            }
        </div>
    </div>
</div>

@await Html.PartialAsync("Forms/Themes/default/ScrollToFormScript")

@functions
{
    void RenderCaption(FieldViewModel field)
    {
        <text>@field.Caption</text>
        if (field.ShowIndicator)
        {
            <span class="umbraco-forms-indicator">@Model.Indicator</span>
        }        
    }

    async Task RenderField(FieldViewModel field)
    {
        if (!string.IsNullOrEmpty(field.ToolTip))
        {
            <span id="@(field.Id)_description" class="umbraco-forms-tooltip help-block">@field.ToolTip</span>
        }

        <div class="umbraco-forms-field-wrapper">

            @await Html.PartialAsync(FormThemeResolver.GetFieldView(Model, field), field)

            @if (Model.ShowFieldValidaton)
            {
                @Html.ValidationMessage(field.Name, new { role = "alert" })
            }

        </div>
    }
}
