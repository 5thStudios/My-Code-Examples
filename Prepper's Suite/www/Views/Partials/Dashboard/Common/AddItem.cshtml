@inherits Umbraco.Web.Mvc.UmbracoViewPage<bl.Models.Inventory>
@using bl.Models;
@using System.Linq.Expressions;
@using System;


@if (Model.ShowUpdateRecord)
{
    using (Html.BeginUmbracoForm<www.Controllers.ToolsController>(bl.Models.Common.wwwAction.FormSubmit_UpdateItem))
    {
        @Html.AntiForgeryToken()

        if (!Model.ItemSection.BugoutBags)
        {
            <h4>Update Item</h4>
        }

        switch (Model.DocType)
        {
            @*case Common.DocTypes.BugoutBags:
                @BugoutBag()
                break;*@
            case Common.DocTypes.Clothing:
                @Clothing()
                break;
            case Common.DocTypes.CookingStoring:
                @CookingStorage()
                break;
            case Common.DocTypes.Fire:
                @FireEquipment()
                break;
            case Common.DocTypes.FirstAid:
                @FirstAid()
                break;
            case Common.DocTypes.Food:
                @FoodWater()
                break;
            case Common.DocTypes.HuntingFishing:
                @HuntingFishing()
                break;
            case Common.DocTypes.Hygiene:
                @Hygiene()
                break;
            case Common.DocTypes.Miscellaneous:
                @Miscellaneous()
                break;
            case Common.DocTypes.PetsAnimalCare:
                @PetsAnimalCare()
                break;
            case Common.DocTypes.PowerFuel:
                @PowerFuel()
                break;
            case Common.DocTypes.SecurityDefense:
                @SecurityDefense()
                break;
            case Common.DocTypes.Shelter:
                @ShelterCamping()
                break;
            case Common.DocTypes.SpiritualNeeds:
                @SpiritualNeeds()
                break;
            case Common.DocTypes.ToolsHardware:
                @ToolsHardware()
                break;
            default:
                break;
        }

        <br />
        <div class="grid-x grid-padding-x">
            <div class="cell large-8 large-offset-8">
                <button type="submit" class="button expanded large" name="btnCancel" value="true">Cancel</button>
            </div>
            <div class="cell large-8">
                <button type="submit" class="button expanded active large" name="btnSubmit">Update Item</button>
            </div>
        </div>

        <div class="hidden-vars hide">
            @{
                //  ACCT DATA
                @Html.HiddenFor(m => m.MemberId)
                @Html.HiddenFor(m => m.AccountId)
                //  SECTIONS
                @Html.HiddenFor(m => m.ItemSection.Categories)
                @Html.HiddenFor(m => m.ItemSection.ExpirationDate)
                @Html.HiddenFor(m => m.ItemSection.FuelRequirements)
                @Html.HiddenFor(m => m.ItemSection.Genders)
                @Html.HiddenFor(m => m.ItemSection.Locations)
                @Html.HiddenFor(m => m.ItemSection.Measurements)
                @Html.HiddenFor(m => m.ItemSection.Ownership)
                @Html.HiddenFor(m => m.ItemSection.PowerRequirements)
                @Html.HiddenFor(m => m.ItemSection.Seasonal)
                @Html.HiddenFor(m => m.ItemSection.Toolsets)
                //  UPDATING ITEM DATA
                @Html.HiddenFor(m => m.UpdateItem.AccountId)
                @Html.HiddenFor(m => m.UpdateItem.MemberId)
                @Html.HiddenFor(m => m.UpdateItem.ToolId)
                @Html.HiddenFor(m => m.UpdateItem.ItemId)
                @Html.HiddenFor(m => m.UpdateItem.PowerSourceId)
                @Html.HiddenFor(m => m.UpdateItem.FoodTypeId)
                @Html.HiddenFor(m => m.UpdateItem.VolumeId)
                @Html.HiddenFor(m => m.UpdateItem.CreatedTimestamp)
                @Html.HiddenFor(m => m.UpdateItem.LastUpdatedTimestamp)
            }
        </div>
    }
}
else
{
    using (Html.BeginUmbracoForm<www.Controllers.ToolsController>(bl.Models.Common.wwwAction.FormSubmit_AddItem))
    {
        @Html.AntiForgeryToken()

        if (Model.ItemSection.BarcodeEntry)
        {
            <div class="grid-x grid-padding-x upc-inputs">
                <div class="cell large-12">
                    <h4>Add New Item</h4>
                </div>
                <div class="cell large-12">
                    <div class="mobile-app-toggle btn-input-type" data-mobile-app-toggle="">
                        <a class="button is-active" data-value="false">Manual Input</a>
                        <a class="button" data-value="true">Barcode Lookup</a>
                    </div>
                </div>

            </div>
        }
        else if (!Model.ItemSection.BugoutBags)
        {
            <h4>Add New Item</h4>
        }

        switch (Model.DocType)
        {
            case Common.DocTypes.BugoutBags:
                @BugoutBag()
                break;
            case Common.DocTypes.Clothing:
                @Clothing()
                break;
            case Common.DocTypes.CookingStoring:
                @CookingStorage()
                break;
            case Common.DocTypes.Fire:
                @FireEquipment()
                break;
            case Common.DocTypes.FirstAid:
                @FirstAid()
                break;
            case Common.DocTypes.Food:
                @FoodWater()
                break;
            case Common.DocTypes.HuntingFishing:
                @HuntingFishing()
                break;
            case Common.DocTypes.Hygiene:
                @Hygiene()
                break;
            case Common.DocTypes.Miscellaneous:
                @Miscellaneous()
                break;
            case Common.DocTypes.PetsAnimalCare:
                @PetsAnimalCare()
                break;
            case Common.DocTypes.PowerFuel:
                @PowerFuel()
                break;
            case Common.DocTypes.SecurityDefense:
                @SecurityDefense()
                break;
            case Common.DocTypes.Shelter:
                @ShelterCamping()
                break;
            case Common.DocTypes.SpiritualNeeds:
                @SpiritualNeeds()
                break;
            case Common.DocTypes.ToolsHardware:
                @ToolsHardware()
                break;
            default:
                break;
        }

        <br />
        <div class="grid-x grid-padding-x">
            <div class="cell large-8 large-offset-16">
                <button type="submit" class="button expanded active large" name="btnSubmit">Add Item</button>
            </div>
        </div>

        <div class="hidden-vars hide">
            @{
                //  ACCT DATA
                @Html.HiddenFor(m => m.MemberId)
                @Html.HiddenFor(m => m.AccountId)
                //  NEW ITEM DATA
                @Html.HiddenFor(m => m.NewItem.AccountId)
                @Html.HiddenFor(m => m.NewItem.ToolId)
                //  SECTIONS
                @Html.HiddenFor(m => m.ItemSection.Categories)
                @Html.HiddenFor(m => m.ItemSection.ExpirationDate)
                @Html.HiddenFor(m => m.ItemSection.FuelRequirements)
                @Html.HiddenFor(m => m.ItemSection.Genders)
                @Html.HiddenFor(m => m.ItemSection.Locations)
                @Html.HiddenFor(m => m.ItemSection.Measurements)
                @Html.HiddenFor(m => m.ItemSection.Ownership)
                @Html.HiddenFor(m => m.ItemSection.PowerRequirements)
                @Html.HiddenFor(m => m.ItemSection.Seasonal)
                @Html.HiddenFor(m => m.ItemSection.Toolsets)
            }
        </div>
    }
}







@helper BugoutBag()
{
    <div class="BugoutBag">

        <div class="grid-x grid-padding-x">
            <div class="cell large-24">
                <h5>Bugout Bag</h5>
            </div>
            <div class="cell large-24">

                @Html.DropDownListFor(m => m.NewItem.LocationId, new SelectList(Model.LstBugoutLocations, "LocationId", "Name"), "")

            </div>
        </div>
        <br />


        <div id="formPnl">
            <h4>Filter List</h4>
            <div class="grid-x grid-padding-x">
                <div class="cell large-12">
                    <h5>Select Toolset</h5>
                    <select id="ddlToolsets">
                        <option value=""></option>
                        @foreach (var lnk in Model.LstLinks)
                        {
                            <option value="@lnk.Id" data-toolid="@lnk.Id">@lnk.Title</option>
                        }
                    </select>
                </div>
                <div class="cell large-12">
                    <h5>Category</h5>
                    <select id="ddlCategories">
                        <option value=""></option>
                        @foreach (var lnk in Model.LstCategories)
                        {
                            <option value="@lnk.CategoryId" data-toolid="@lnk.ToolId" data-categoryid="@lnk.CategoryId">@lnk.Name</option>
                        }
                    </select>
                </div>
            </div>
            <br />


            <h4>Add Items to Bag</h4>
            <div class="callout headings secondary">
                <div class="grid-x collapse">
                    <div class="cell large-12">
                        Name
                    </div>
                    <div class="cell large-12">
                        Location
                    </div>
                </div>
            </div>


            <div id="lstRecords" class="callout secondary">
                @foreach (var item in Model.LstItems)
                {
                    Boolean IsBugoutBag = false; ;
                    if (item.Location != null)
                    { IsBugoutBag = item.Location.IsBugoutBag; }

                    <div class='grid-x collapse record hide @( IsBugoutBag == true ? "IsBugoutBag" : "")' data-toolid="@item.ToolId" data-categoryid="@item.CategoryId">
                        <div class="cell large-12">
                            @item.Name
                        </div>
                        <div class="cell large-9">
                            @if (item.Location != null)
                            {
                                <span>@item.Location.Name</span>
                            }
                        </div>
                        <div class="cell large-3">
                            @if (!IsBugoutBag)
                            {
                                <button type="submit" name="btnAdd2BugoutBag" class="button seconday small expanded" value="@item.ItemId">Add</button>
                            }
                        </div>
                    </div>
                }
            </div>
            <br />
            <div class="callout secondary" style="opacity:.25;">
                <div class="grid-x collapse">
                    <div class="cell large-5">
                        Item Name
                    </div>
                    <div class="cell large-6">
                        Category
                    </div>
                    <div class="cell large-6">
                        Subcategory
                    </div>
                    <div class="cell large-2">
                        2
                    </div>
                    <div class="cell large-2">
                        1
                    </div>
                    <div class="cell large-3">
                        <a class="button seconday small expanded">Add</a>
                    </div>
                </div>
                <div class="grid-x collapse inactive-content">
                    <div class="cell large-5">
                        Item Name
                    </div>
                    <div class="cell large-6">
                        Category
                    </div>
                    <div class="cell large-6">
                        Subcategory
                    </div>
                    <div class="cell large-2">
                        2
                    </div>
                    <div class="cell large-2">
                        0
                    </div>
                    <div class="cell large-3">

                    </div>
                </div>
                <div class="grid-x collapse">
                    <div class="cell large-5">
                        Item Name
                    </div>
                    <div class="cell large-6">
                        Category
                    </div>
                    <div class="cell large-6">
                        Subcategory
                    </div>
                    <div class="cell large-2">
                        2
                    </div>
                    <div class="cell large-2">
                        1
                    </div>
                    <div class="cell large-3">
                        <a class="button seconday small expanded">Add</a>
                    </div>
                </div>
            </div>


            <br />
            <br />
            <div id="pnl-add-2-inventory" class="grid-x">
                <div class="cell">
                    <h4>Select Tool to Add To</h4>
                    <div class="grid-x large-up-7 text-center">
                        @foreach (var lnk in Model.LstLinks)
                        {
                            <div class="cell">
                                <a href="@lnk.Url" title="@lnk.Title"><i class="@lnk.Icon"></i></a>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>


    </div>
}

@helper Clothing()
{
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Item Name</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.TextBoxFor(m => m.UpdateItem.Name, new { placeholder = "Item Name" });
            }
            else
            {
                @Html.TextBoxFor(m => m.NewItem.Name, new { placeholder = "Item Name" });
            }
        </div>
    </div>
    <br />
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Category</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.DropDownListFor(m => m.UpdateItem.CategoryId, new SelectList(Model.LstCategories, "CategoryId", "Name"), "Select a Category")
            }
            else
            {
                @Html.DropDownListFor(m => m.NewItem.CategoryId, new SelectList(Model.LstCategories, "CategoryId", "Name"), "Select a Category")
            }
        </div>
    </div>
    <br />
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Gender</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.DropDownListFor(m => m.UpdateItem.GenderId, new SelectList(Model.LstGenders, "GenderId", "Name"), "Select Gender")
            }
            else
            {
                @Html.DropDownListFor(m => m.NewItem.GenderId, new SelectList(Model.LstGenders, "GenderId", "Name"), "Select Gender")
            }
        </div>
    </div>
    <br />
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Season</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.DropDownListFor(m => m.UpdateItem.SeasonId, new SelectList(Model.LstSeasons, "SeasonId", "Name"), "Select Seasonal")
            }
            else
            {
                @Html.DropDownListFor(m => m.NewItem.SeasonId, new SelectList(Model.LstSeasons, "SeasonId", "Name"), "Select Seasonal")
            }
        </div>
    </div>
    <br />
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Owner</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.DropDownListFor(m => m.UpdateItem.MemberId, new SelectList(Model.LstMembers, "MemberId", "FirstName"), "Select Owner")
            }
            else
            {
                @Html.DropDownListFor(m => m.NewItem.MemberId, new SelectList(Model.LstMembers, "MemberId", "FirstName"), "Select Owner")
            }
        </div>
    </div>
    <br />
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Location</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.DropDownListFor(m => m.UpdateItem.LocationId, new SelectList(Model.LstLocations, "LocationId", "Name"), "Select a Location")
            }
            else
            {
                @Html.DropDownListFor(m => m.NewItem.LocationId, new SelectList(Model.LstLocations, "LocationId", "Name"), "Select a Location")
            }
        </div>
    </div>
    if (!Model.ShowUpdateRecord)
    {
        <br />
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Quantity</h5>
            </div>
            <div class="cell large-16">
                @Html.TextBoxFor(m => m.NewItem.Quantity, new { @type = "number" })
            </div>
        </div>
    }
}

@helper CookingStorage()
{
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Item Name</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.TextBoxFor(m => m.UpdateItem.Name, new { placeholder = "Item Name" });
            }
            else
            {
                @Html.TextBoxFor(m => m.NewItem.Name, new { placeholder = "Item Name" });
            }
        </div>
    </div>
    <br />
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Category</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.DropDownListFor(m => m.UpdateItem.CategoryId, new SelectList(Model.LstCategories, "CategoryId", "Name"), "Select a Category")
            }
            else
            {
                @Html.DropDownListFor(m => m.NewItem.CategoryId, new SelectList(Model.LstCategories, "CategoryId", "Name"), "Select a Category")
            }
        </div>
    </div>
    <br />
    if (Model.ShowUpdateRecord)
    {
        if (Model.UpdateItem.PowerSource != null)
        {
            @Html.HiddenFor(m => m.UpdateItem.PowerSource.PowerSourceId)
            @Html.HiddenFor(m => m.UpdateItem.PowerSource.FuelId)
            @Html.HiddenFor(m => m.UpdateItem.PowerSource.BatteriesId)
        }
        @Html.HiddenFor(m => m.UpdateItem.PowerSource.Battery.BatteriesId)
    }
    <div class="grid-x grid-padding-x">
        <div class="cell large-12">
            <h5>Requires A/C Current?</h5>
        </div>
        <div class="cell large-6">
            <div class="mobile-app-toggle" data-mobile-app-toggle>
                @if (Model.ShowUpdateRecord)
                {
                    @Html.HiddenFor(m => m.UpdateItem.PowerSource.RequiresAC)
                }
                else
                {
                    @Html.HiddenFor(m => m.NewItem.PowerSource.RequiresAC)
                }
                <a class="button no is-active">No</a>
                <a class="button yes">Yes</a>
            </div>
        </div>
    </div>
    <div class="grid-x grid-padding-x">
        <div class="cell large-12">
            <h5>Requires Batteries</h5>
        </div>
        <div class="cell large-6">
            <div class="mobile-app-toggle btn-requires-batteries" data-mobile-app-toggle>
                @if (Model.ShowUpdateRecord)
                {
                    @Html.HiddenFor(m => m.UpdateItem.PowerSource.RequiresBatteries)
                }
                else
                {
                    @Html.HiddenFor(m => m.NewItem.PowerSource.RequiresBatteries)
                }
                <a class="button no is-active">No</a>
                <a class="button yes">Yes</a>
            </div>
        </div>
    </div>
    <fieldset id="pnl-batteries">
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Battery Type</h5>
            </div>
            <div class="cell large-16">
                @if (Model.ShowUpdateRecord)
                {
                    @Html.DropDownListFor(m => m.UpdateItem.PowerSource.Battery.BatteryTypeId, new SelectList(Model.LstBatteryTypes, "BatteryTypeId", "Name"), "Select a Battery Type")
                }
                else
                {
                    @Html.DropDownListFor(m => m.NewItem.PowerSource.Battery.BatteryTypeId, new SelectList(Model.LstBatteryTypes, "BatteryTypeId", "Name"), "Select a Battery Type")
                }
            </div>
        </div>
        <br />
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Quantity Needed</h5>
            </div>
            <div class="cell large-16">
                @if (Model.ShowUpdateRecord)
                {
                    @Html.TextBoxFor(m => m.UpdateItem.PowerSource.Battery.BatteryQuantity, new { @type = "number" })
                }
                else
                {
                    @Html.TextBoxFor(m => m.NewItem.PowerSource.Battery.BatteryQuantity, new { @type = "number" })
                }
            </div>
        </div>
        <br />
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Has Batteries?</h5>
            </div>
            <div class="cell large-6">
                <div class="mobile-app-toggle btn-has-batteries" data-mobile-app-toggle>
                    @if (Model.ShowUpdateRecord)
                    {
                        @Html.HiddenFor(m => m.UpdateItem.PowerSource.Battery.HasBatteries)
                    }
                    else
                    {
                        @Html.HiddenFor(m => m.NewItem.PowerSource.Battery.HasBatteries)
                    }
                    <a class="button no is-active">No</a>
                    <a class="button yes">Yes</a>
                </div>
            </div>
        </div>
    </fieldset>
    <br />
    if (Model.ShowUpdateRecord)
    {
        @Html.HiddenFor(m => m.UpdateItem.PowerSource.Fuel.FuelId)
    }
    <div class="grid-x grid-padding-x">
        <div class="cell large-12">
            <h5>Requires Fuel</h5>
        </div>
        <div class="cell large-6">
            <div class="mobile-app-toggle btn-requires-fuel" data-mobile-app-toggle>
                @if (Model.ShowUpdateRecord)
                {
                    @Html.HiddenFor(m => m.UpdateItem.PowerSource.RequiresFuel)
                }
                else
                {
                    @Html.HiddenFor(m => m.NewItem.PowerSource.RequiresFuel)
                }
                <a class="button no is-active">No</a>
                <a class="button yes">Yes</a>
            </div>
        </div>
    </div>
    <fieldset id="pnl-fuel">
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Fuel Type</h5>
            </div>
            <div class="cell large-16">
                @if (Model.ShowUpdateRecord)
                {
                    @Html.DropDownListFor(m => m.UpdateItem.PowerSource.Fuel.FuelTypeId, new SelectList(Model.LstFuelTypes, "FuelTypeId", "Name"), "Select a Fuel Type")
                }
                else
                {
                    @Html.DropDownListFor(m => m.NewItem.PowerSource.Fuel.FuelTypeId, new SelectList(Model.LstFuelTypes, "FuelTypeId", "Name"), "Select a Fuel Type")
                }
            </div>
        </div>
        <br />
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Has Fuel</h5>
            </div>
            <div class="cell large-6">
                <div class="mobile-app-toggle" data-mobile-app-toggle>
                    @if (Model.ShowUpdateRecord)
                    {
                        @Html.HiddenFor(m => m.UpdateItem.PowerSource.Fuel.HasFuel)
                    }
                    else
                    {
                        @Html.HiddenFor(m => m.NewItem.PowerSource.Fuel.HasFuel)
                    }
                    <a class="button no is-active">No</a>
                    <a class="button yes">Yes</a>
                </div>
            </div>

        </div>
    </fieldset>
    <br />
    if (Model.ShowUpdateRecord)
    {
        @Html.HiddenFor(m => m.UpdateItem.Volume.MeasurementStateId)
        @Html.HiddenFor(m => m.UpdateItem.Volume.VolumeId)
    }
    else
    {
        @Html.HiddenFor(m => m.NewItem.Volume.MeasurementStateId)
    }
    <div class="grid-x grid-padding-x">
        <div class="cell large-12">
            <h5>Measurement System</h5>
        </div>
        <div class="cell large-12">
            <div class="mobile-app-toggle btn-measurement-system" data-mobile-app-toggle>
                @if (Model.ShowUpdateRecord)
                {
                    @Html.HiddenFor(m => m.UpdateItem.Volume.MeasurementSystemId)
                }
                else
                {
                    @Html.HiddenFor(m => m.NewItem.Volume.MeasurementSystemId)
                }
                @foreach (var system in Model.LstMeasurementSystems)
                {
                    <a class="button" data-system-id="@system.MeasurementSystemId">@system.Type</a>
                }
            </div>
        </div>
    </div>
    <br />
    <div class="grid-x grid-padding-x">
        <div class="cell large-12 ddlMeasurementTypes">
            <h5>Measurement Type</h5>
            @if (Model.ShowUpdateRecord)
            {
                <div>
                    <select id="ddlUpdateMeasurementTypeId" name="@Html.NameFor(x => x.UpdateItem.Volume.MeasurementTypeId)" data-measurement-type-id="@Html.ValueFor(x => x.UpdateItem.Volume.MeasurementTypeId)">
                        <option value=""></option>
                        @foreach (var msrmnt in Model.LstMeasurementTypes)
                        {
                            <option value="@msrmnt.MeasurementTypeId" data-measurement-system-id="@msrmnt.MeasurementSystemId" data-measurement-state-id="@msrmnt.MeasurementStateId">@msrmnt.Type</option>
                        }
                    </select>
                </div>
            }
            else
            {
                <div>
                    <select id="ddlNewMeasurementTypeId" name="@Html.NameFor(x => x.NewItem.Volume.MeasurementTypeId)" data-measurement-type-id="">
                        <option value=""></option>
                        @foreach (var msrmnt in Model.LstMeasurementTypes)
                        {
                            <option value="@msrmnt.MeasurementTypeId" data-measurement-system-id="@msrmnt.MeasurementSystemId" data-measurement-state-id="@msrmnt.MeasurementStateId">@msrmnt.Type</option>
                        }
                    </select>
                </div>
            }
        </div>
        <div class="cell large-12">
            <h5>Units</h5>
            @*<input type="text" placeholder="#" />*@
            @if (Model.ShowUpdateRecord)
            {
                @Html.TextBoxFor(m => m.UpdateItem.Volume.Units, new { @type = "number" })
            }
            else
            {
                @Html.TextBoxFor(m => m.NewItem.Volume.Units, new { @type = "number" })
            }
        </div>
    </div>
    <br />
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Location</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.DropDownListFor(m => m.UpdateItem.LocationId, new SelectList(Model.LstLocations, "LocationId", "Name"), "Select a Location")
            }
            else
            {
                @Html.DropDownListFor(m => m.NewItem.LocationId, new SelectList(Model.LstLocations, "LocationId", "Name"), "Select a Location")
            }
        </div>
    </div>
    if (!Model.ShowUpdateRecord)
    {
        <br />
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Quantity</h5>
            </div>
            <div class="cell large-16">
                @Html.TextBoxFor(m => m.NewItem.Quantity, new { @type = "number" })
            </div>
        </div>
    }
}

@helper FireEquipment()
{
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Item Name</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.TextBoxFor(m => m.UpdateItem.Name, new { placeholder = "Item Name" });
            }
            else
            {
                @Html.TextBoxFor(m => m.NewItem.Name, new { placeholder = "Item Name" });
            }
        </div>
    </div>
    <br />
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Category</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.DropDownListFor(m => m.UpdateItem.CategoryId, new SelectList(Model.LstCategories, "CategoryId", "Name"), "Select a Category")
            }
            else
            {
                @Html.DropDownListFor(m => m.NewItem.CategoryId, new SelectList(Model.LstCategories, "CategoryId", "Name"), "Select a Category")
            }
        </div>
    </div>
    <br />
    if (Model.ShowUpdateRecord)
    {
        if (Model.UpdateItem.PowerSource != null)
        {
            @Html.HiddenFor(m => m.UpdateItem.PowerSource.PowerSourceId)
            @Html.HiddenFor(m => m.UpdateItem.PowerSource.FuelId)
            @Html.HiddenFor(m => m.UpdateItem.PowerSource.BatteriesId)
        }
        @Html.HiddenFor(m => m.UpdateItem.PowerSource.Battery.BatteriesId)
    }

    <div class="grid-x grid-padding-x">
        <div class="cell large-12">
            <h5>Requires A/C Current?</h5>
        </div>
        <div class="cell large-6">
            <div class="mobile-app-toggle" data-mobile-app-toggle>
                @if (Model.ShowUpdateRecord)
                {
                    @Html.HiddenFor(m => m.UpdateItem.PowerSource.RequiresAC)
                }
                else
                {
                    @Html.HiddenFor(m => m.NewItem.PowerSource.RequiresAC)
                }
                <a class="button no is-active">No</a>
                <a class="button yes">Yes</a>
            </div>
        </div>
    </div>
    <div class="grid-x grid-padding-x">
        <div class="cell large-12">
            <h5>Requires Batteries</h5>
        </div>
        <div class="cell large-6">
            <div class="mobile-app-toggle btn-requires-batteries" data-mobile-app-toggle>
                @if (Model.ShowUpdateRecord)
                {
                    @Html.HiddenFor(m => m.UpdateItem.PowerSource.RequiresBatteries)
                }
                else
                {
                    @Html.HiddenFor(m => m.NewItem.PowerSource.RequiresBatteries)
                }
                <a class="button no is-active">No</a>
                <a class="button yes">Yes</a>
            </div>
        </div>
    </div>
    <fieldset id="pnl-batteries">
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Battery Type</h5>
            </div>
            <div class="cell large-16">
                @if (Model.ShowUpdateRecord)
                {
                    @Html.DropDownListFor(m => m.UpdateItem.PowerSource.Battery.BatteryTypeId, new SelectList(Model.LstBatteryTypes, "BatteryTypeId", "Name"), "Select a Battery Type")
                }
                else
                {
                    @Html.DropDownListFor(m => m.NewItem.PowerSource.Battery.BatteryTypeId, new SelectList(Model.LstBatteryTypes, "BatteryTypeId", "Name"), "Select a Battery Type")
                }
            </div>
        </div>
        <br />
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Quantity Needed</h5>
            </div>
            <div class="cell large-16">
                @if (Model.ShowUpdateRecord)
                {
                    @Html.TextBoxFor(m => m.UpdateItem.PowerSource.Battery.BatteryQuantity, new { @type = "number" })
                }
                else
                {
                    @Html.TextBoxFor(m => m.NewItem.PowerSource.Battery.BatteryQuantity, new { @type = "number" })
                }
            </div>
        </div>
        <br />
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Has Batteries?</h5>
            </div>
            <div class="cell large-6">
                <div class="mobile-app-toggle btn-has-batteries" data-mobile-app-toggle>
                    @if (Model.ShowUpdateRecord)
                    {
                        @Html.HiddenFor(m => m.UpdateItem.PowerSource.Battery.HasBatteries)
                    }
                    else
                    {
                        @Html.HiddenFor(m => m.NewItem.PowerSource.Battery.HasBatteries)
                    }
                    <a class="button no is-active">No</a>
                    <a class="button yes">Yes</a>
                </div>
            </div>
        </div>
    </fieldset>
    <br />
    if (Model.ShowUpdateRecord)
    {
        @Html.HiddenFor(m => m.UpdateItem.PowerSource.Fuel.FuelId)
    }

    <div class="grid-x grid-padding-x">
        <div class="cell large-12">
            <h5>Requires Fuel</h5>
        </div>
        <div class="cell large-6">
            <div class="mobile-app-toggle btn-requires-fuel" data-mobile-app-toggle>
                @if (Model.ShowUpdateRecord)
                {
                    @Html.HiddenFor(m => m.UpdateItem.PowerSource.RequiresFuel)
                }
                else
                {
                    @Html.HiddenFor(m => m.NewItem.PowerSource.RequiresFuel)
                }
                <a class="button no is-active">No</a>
                <a class="button yes">Yes</a>
            </div>
        </div>
    </div>
    <fieldset id="pnl-fuel">
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Fuel Type</h5>
            </div>
            <div class="cell large-16">
                @if (Model.ShowUpdateRecord)
                {
                    @Html.DropDownListFor(m => m.UpdateItem.PowerSource.Fuel.FuelTypeId, new SelectList(Model.LstFuelTypes, "FuelTypeId", "Name"), "Select a Fuel Type")
                }
                else
                {
                    @Html.DropDownListFor(m => m.NewItem.PowerSource.Fuel.FuelTypeId, new SelectList(Model.LstFuelTypes, "FuelTypeId", "Name"), "Select a Fuel Type")
                }
            </div>
        </div>
        <br />
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Has Fuel</h5>
            </div>
            <div class="cell large-6">
                <div class="mobile-app-toggle" data-mobile-app-toggle>
                    @if (Model.ShowUpdateRecord)
                    {
                        @Html.HiddenFor(m => m.UpdateItem.PowerSource.Fuel.HasFuel)
                    }
                    else
                    {
                        @Html.HiddenFor(m => m.NewItem.PowerSource.Fuel.HasFuel)
                    }
                    <a class="button no is-active">No</a>
                    <a class="button yes">Yes</a>
                </div>
            </div>

        </div>
    </fieldset>
    <br />
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Location</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.DropDownListFor(m => m.UpdateItem.LocationId, new SelectList(Model.LstLocations, "LocationId", "Name"), "Select a Location")
            }
            else
            {
                @Html.DropDownListFor(m => m.NewItem.LocationId, new SelectList(Model.LstLocations, "LocationId", "Name"), "Select a Location")
            }
        </div>
    </div>
    if (!Model.ShowUpdateRecord)
    {
        <br />
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Quantity</h5>
            </div>
            <div class="cell large-16">
                @Html.TextBoxFor(m => m.NewItem.Quantity, new { @type = "number" })
            </div>
        </div>
    }
}

@helper FirstAid()
{
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Item Name</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.TextBoxFor(m => m.UpdateItem.Name, new { placeholder = "Item Name" });
            }
            else
            {
                @Html.TextBoxFor(m => m.NewItem.Name, new { placeholder = "Item Name" });
            }
        </div>
    </div>
    <br />
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Category</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.DropDownListFor(m => m.UpdateItem.CategoryId, new SelectList(Model.LstCategories, "CategoryId", "Name"), "Select a Category")
            }
            else
            {
                @Html.DropDownListFor(m => m.NewItem.CategoryId, new SelectList(Model.LstCategories, "CategoryId", "Name"), "Select a Category")
            }
        </div>
    </div>
    <br />
    if (Model.ShowUpdateRecord)
    {
        if (Model.UpdateItem.PowerSource != null)
        {
            @Html.HiddenFor(m => m.UpdateItem.PowerSource.PowerSourceId)
            @Html.HiddenFor(m => m.UpdateItem.PowerSource.FuelId)
            @Html.HiddenFor(m => m.UpdateItem.PowerSource.BatteriesId)
        }
        @Html.HiddenFor(m => m.UpdateItem.PowerSource.Battery.BatteriesId)
    }

    <div class="grid-x grid-padding-x">
        <div class="cell large-12">
            <h5>Requires A/C Current?</h5>
        </div>
        <div class="cell large-6">
            <div class="mobile-app-toggle" data-mobile-app-toggle>
                @if (Model.ShowUpdateRecord)
                {
                    @Html.HiddenFor(m => m.UpdateItem.PowerSource.RequiresAC)
                }
                else
                {
                    @Html.HiddenFor(m => m.NewItem.PowerSource.RequiresAC)
                }
                <a class="button no is-active">No</a>
                <a class="button yes">Yes</a>
            </div>
        </div>
    </div>
    <div class="grid-x grid-padding-x">
        <div class="cell large-12">
            <h5>Requires Batteries</h5>
        </div>
        <div class="cell large-6">
            <div class="mobile-app-toggle btn-requires-batteries" data-mobile-app-toggle>
                @if (Model.ShowUpdateRecord)
                {
                    @Html.HiddenFor(m => m.UpdateItem.PowerSource.RequiresBatteries)
                }
                else
                {
                    @Html.HiddenFor(m => m.NewItem.PowerSource.RequiresBatteries)
                }
                <a class="button no is-active">No</a>
                <a class="button yes">Yes</a>
            </div>
        </div>
    </div>
    <fieldset id="pnl-batteries">
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Battery Type</h5>
            </div>
            <div class="cell large-16">
                @if (Model.ShowUpdateRecord)
                {
                    @Html.DropDownListFor(m => m.UpdateItem.PowerSource.Battery.BatteryTypeId, new SelectList(Model.LstBatteryTypes, "BatteryTypeId", "Name"), "Select a Battery Type")
                }
                else
                {
                    @Html.DropDownListFor(m => m.NewItem.PowerSource.Battery.BatteryTypeId, new SelectList(Model.LstBatteryTypes, "BatteryTypeId", "Name"), "Select a Battery Type")
                }
            </div>
        </div>
        <br />
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Quantity Needed</h5>
            </div>
            <div class="cell large-16">
                @if (Model.ShowUpdateRecord)
                {
                    @Html.TextBoxFor(m => m.UpdateItem.PowerSource.Battery.BatteryQuantity, new { @type = "number" })
                }
                else
                {
                    @Html.TextBoxFor(m => m.NewItem.PowerSource.Battery.BatteryQuantity, new { @type = "number" })
                }
            </div>
        </div>
        <br />
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Has Batteries?</h5>
            </div>
            <div class="cell large-6">
                <div class="mobile-app-toggle btn-has-batteries" data-mobile-app-toggle>
                    @if (Model.ShowUpdateRecord)
                    {
                        @Html.HiddenFor(m => m.UpdateItem.PowerSource.Battery.HasBatteries)
                    }
                    else
                    {
                        @Html.HiddenFor(m => m.NewItem.PowerSource.Battery.HasBatteries)
                    }
                    <a class="button no is-active">No</a>
                    <a class="button yes">Yes</a>
                </div>
            </div>
        </div>
    </fieldset>
    <br />
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Expiration Date</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                if (Model.UpdateItem.ExpirationDate != null)
                {
                    @Html.TextBoxFor(m => m.UpdateItem.ExpirationDate, new { @type = "date", @Value = Model.UpdateItem.ExpirationDate.Value.ToString("yyyy-MM-dd") })
                }
                else
                {
                    @Html.TextBoxFor(m => m.UpdateItem.ExpirationDate, new { @type = "date" })
                }
            }
            else
            {
                @Html.TextBoxFor(m => m.NewItem.ExpirationDate, new { @type = "date" })
            }
        </div>
    </div>
    <br />
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Location</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.DropDownListFor(m => m.UpdateItem.LocationId, new SelectList(Model.LstLocations, "LocationId", "Name"), "Select a Location")
            }
            else
            {
                @Html.DropDownListFor(m => m.NewItem.LocationId, new SelectList(Model.LstLocations, "LocationId", "Name"), "Select a Location")
            }
        </div>
    </div>
    if (!Model.ShowUpdateRecord)
    {
        <br />
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Quantity</h5>
            </div>
            <div class="cell large-16">
                @Html.TextBoxFor(m => m.NewItem.Quantity, new { @type = "number" })
            </div>
        </div>
    }
}

@helper FoodWater()
{
    <div class="barcode-pnl" style="display:none;">
        @{
            //Take parsed data from barcode lookup and populate hidden fields
            string Upc = "";
            string ProductLabel = "";
            string ServingsPerContainer = "";
            string ServingSize = "";
            string Units = "";
            string ProductJson = "";
            bool DataMissing = false;

            if (ViewData["productJson"] != null)
            {
                Upc = ViewData["productUpc"].ToString();
                ProductLabel = ViewData["productLabel"].ToString();
                ServingsPerContainer = ViewData["productServingsPerContainer"].ToString();
                ServingSize = ViewData["productServingSizes"].ToString();
                Units = ViewData["productUnits"].ToString();
                ProductJson = ViewData["productJson"].ToString();

            }
            else
            {
                if (ViewData.ContainsKey("DataMissing"))
                {
                    if ((bool)ViewData["DataMissing"] == true)
                    {
                        DataMissing = true;
                        ViewData["DataMissing"] = null;
                    }
                }

            }
        }
        <div class="hide hidden-fields">
            @Html.HiddenFor(m => m.NewItem.JsonData, new { @Value = @ProductJson })
            <input type="hidden" id="hfldUpc" value="@Upc" />
            <input type="hidden" id="hfldProductLabel" value="@ProductLabel" />
            <input type="hidden" id="hfldServingsPerContainer" value="@ServingsPerContainer" />
            <input type="hidden" id="hfldServingSize" value="@ServingSize" />
            <input type="hidden" id="hfldUnits" value="@Units" />
            @*<input type="hidden" id="hfldRapid" value="@"*@
        </div>


        <div class="grid-x grid-padding-x">
            <div class="cell">
                <fieldset>
                    <legend style="margin:0;"> <strong>Barcode</strong> </legend>
                    <div class="grid-x grid-padding-x">
                        <div class="cell large-14">
                            <h6>Enter or scan barcode.<br />'Rapid' mode automatically adds product to list with default values.</h6>
                            @if (DataMissing)
                            {
                                <h6 style="color: red; font-weight: 900;">*Could Not Find Data. Enter manually.</h6>
                            }
                        </div>
                        <div class="cell large-10">
                            <div class="grid-x grid-padding-x">
                                <div class="cell auto">
                                    @Html.TextBoxFor(m => m.NewItem.Barcode, new { placeholder = "Barcode" })
                                </div>
                                <div class="cell shrink">
                                    <button type="submit" class="button" name="btnLookup" value="true">Lookup</button>
                                </div>
                            </div>
                            <div class="grid-x grid-padding-x">
                                <div class="cell">
                                    <div class="mobile-app-toggle input-type-btns" data-mobile-app-toggle="">
                                        @Html.HiddenFor(m => m.RapidInput)
                                        <a class="button no is-active">Single</a>
                                        <a class="button yes">Rapid</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </fieldset>
                <br />
            </div>
        </div>
    </div>


    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Item Name</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.TextBoxFor(m => m.UpdateItem.Name, new { placeholder = "Item Name" });
            }
            else
            {
                @Html.TextBoxFor(m => m.NewItem.Name, new { placeholder = "Item Name" });
            }
        </div>
    </div>
    <br />
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Category</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.DropDownListFor(m => m.UpdateItem.CategoryId, new SelectList(Model.LstCategories, "CategoryId", "Name"), "Select a Category")
            }
            else
            {
                @Html.DropDownListFor(m => m.NewItem.CategoryId, new SelectList(Model.LstCategories, "CategoryId", "Name"), "Select a Category")
            }
        </div>
    </div>
    <br />
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Expiration Date</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                if (Model.UpdateItem.ExpirationDate != null)
                {
                    @Html.TextBoxFor(m => m.UpdateItem.ExpirationDate, new { @type = "date", @Value = Model.UpdateItem.ExpirationDate.Value.ToString("yyyy-MM-dd") })
                }
                else
                {
                    @Html.TextBoxFor(m => m.UpdateItem.ExpirationDate, new { @type = "date" })
                }
            }
            else
            {
                @Html.TextBoxFor(m => m.NewItem.ExpirationDate, new { @type = "date" })
            }
        </div>
    </div>
    <br />
    if (Model.ShowUpdateRecord)
    {
        @Html.HiddenFor(m => m.UpdateItem.Volume.MeasurementStateId)
        @Html.HiddenFor(m => m.UpdateItem.Volume.VolumeId)
    }
    else
    {
        @Html.HiddenFor(m => m.NewItem.Volume.MeasurementStateId)
    }
    <div class="grid-x grid-padding-x">
        <div class="cell large-12">
            <h5>Measurement System</h5>
        </div>
        <div class="cell large-12">
            <div class="mobile-app-toggle btn-measurement-system" data-mobile-app-toggle>
                @if (Model.ShowUpdateRecord)
                {
                    @Html.HiddenFor(m => m.UpdateItem.Volume.MeasurementSystemId)
                }
                else
                {
                    @Html.HiddenFor(m => m.NewItem.Volume.MeasurementSystemId)
                }
                @foreach (var system in Model.LstMeasurementSystems)
                {
                    <a class="button" data-system-id="@system.MeasurementSystemId">@system.Type</a>
                }
            </div>
        </div>
    </div>
    <br />
    <div class="grid-x grid-padding-x">
        <div class="cell large-12 ddlMeasurementTypes">
            <h5>Measurement Type</h5>
            @if (Model.ShowUpdateRecord)
            {
                <div>
                    <select id="ddlUpdateMeasurementTypeId" name="@Html.NameFor(x => x.UpdateItem.Volume.MeasurementTypeId)" data-measurement-type-id="@Html.ValueFor(x => x.UpdateItem.Volume.MeasurementTypeId)">
                        <option value=""></option>
                        @foreach (var msrmnt in Model.LstMeasurementTypes)
                        {
                            <option value="@msrmnt.MeasurementTypeId" data-measurement-system-id="@msrmnt.MeasurementSystemId" data-measurement-state-id="@msrmnt.MeasurementStateId">@msrmnt.Type</option>
                        }
                    </select>
                </div>
            }
            else
            {
                <div>
                    <select id="ddlNewMeasurementTypeId" name="@Html.NameFor(x => x.NewItem.Volume.MeasurementTypeId)" data-measurement-type-id="">
                        <option value=""></option>
                        @foreach (var msrmnt in Model.LstMeasurementTypes)
                        {
                            <option value="@msrmnt.MeasurementTypeId" data-measurement-system-id="@msrmnt.MeasurementSystemId" data-measurement-state-id="@msrmnt.MeasurementStateId">@msrmnt.Type</option>
                        }
                    </select>
                </div>
            }
        </div>
        <div class="cell large-12">
            <h5>Units</h5>
            @*<input type="text" placeholder="#" />*@
            @if (Model.ShowUpdateRecord)
            {
                @Html.TextBoxFor(m => m.UpdateItem.Volume.Units, new { @type = "number" })
            }
            else
            {
                @Html.TextBoxFor(m => m.NewItem.Volume.Units, new { @type = "number" })
            }
        </div>
    </div>
    <br />
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Location</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.DropDownListFor(m => m.UpdateItem.LocationId, new SelectList(Model.LstLocations, "LocationId", "Name"), "Select a Location")
            }
            else
            {
                @Html.DropDownListFor(m => m.NewItem.LocationId, new SelectList(Model.LstLocations, "LocationId", "Name"), "Select a Location")
            }
        </div>
    </div>
    if (!Model.ShowUpdateRecord)
    {
        <br />
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Quantity</h5>
            </div>
            <div class="cell large-16">
                @Html.TextBoxFor(m => m.NewItem.Quantity, new { @type = "number" })
            </div>
        </div>
    }
}

@helper HuntingFishing()
{
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Item Name</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.TextBoxFor(m => m.UpdateItem.Name, new { placeholder = "Item Name" });
            }
            else
            {
                @Html.TextBoxFor(m => m.NewItem.Name, new { placeholder = "Item Name" });
            }
        </div>
    </div>
    <br />
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Category</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.DropDownListFor(m => m.UpdateItem.CategoryId, new SelectList(Model.LstCategories, "CategoryId", "Name"), "Select a Category")
            }
            else
            {
                @Html.DropDownListFor(m => m.NewItem.CategoryId, new SelectList(Model.LstCategories, "CategoryId", "Name"), "Select a Category")
            }
        </div>
    </div>
    <br />
    if (Model.ShowUpdateRecord)
    {
        if (Model.UpdateItem.PowerSource != null)
        {
            @Html.HiddenFor(m => m.UpdateItem.PowerSource.PowerSourceId)
            @Html.HiddenFor(m => m.UpdateItem.PowerSource.FuelId)
            @Html.HiddenFor(m => m.UpdateItem.PowerSource.BatteriesId)
        }
        @Html.HiddenFor(m => m.UpdateItem.PowerSource.Battery.BatteriesId)
    }

    <div class="grid-x grid-padding-x">
        <div class="cell large-12">
            <h5>Requires A/C Current?</h5>
        </div>
        <div class="cell large-6">
            <div class="mobile-app-toggle" data-mobile-app-toggle>
                @if (Model.ShowUpdateRecord)
                {
                    @Html.HiddenFor(m => m.UpdateItem.PowerSource.RequiresAC)
                }
                else
                {
                    @Html.HiddenFor(m => m.NewItem.PowerSource.RequiresAC)
                }
                <a class="button no is-active">No</a>
                <a class="button yes">Yes</a>
            </div>
        </div>
    </div>
    <div class="grid-x grid-padding-x">
        <div class="cell large-12">
            <h5>Requires Batteries</h5>
        </div>
        <div class="cell large-6">
            <div class="mobile-app-toggle btn-requires-batteries" data-mobile-app-toggle>
                @if (Model.ShowUpdateRecord)
                {
                    @Html.HiddenFor(m => m.UpdateItem.PowerSource.RequiresBatteries)
                }
                else
                {
                    @Html.HiddenFor(m => m.NewItem.PowerSource.RequiresBatteries)
                }
                <a class="button no is-active">No</a>
                <a class="button yes">Yes</a>
            </div>
        </div>
    </div>
    <fieldset id="pnl-batteries">
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Battery Type</h5>
            </div>
            <div class="cell large-16">
                @if (Model.ShowUpdateRecord)
                {
                    @Html.DropDownListFor(m => m.UpdateItem.PowerSource.Battery.BatteryTypeId, new SelectList(Model.LstBatteryTypes, "BatteryTypeId", "Name"), "Select a Battery Type")
                }
                else
                {
                    @Html.DropDownListFor(m => m.NewItem.PowerSource.Battery.BatteryTypeId, new SelectList(Model.LstBatteryTypes, "BatteryTypeId", "Name"), "Select a Battery Type")
                }
            </div>
        </div>
        <br />
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Quantity Needed</h5>
            </div>
            <div class="cell large-16">
                @if (Model.ShowUpdateRecord)
                {
                    @Html.TextBoxFor(m => m.UpdateItem.PowerSource.Battery.BatteryQuantity, new { @type = "number" })
                }
                else
                {
                    @Html.TextBoxFor(m => m.NewItem.PowerSource.Battery.BatteryQuantity, new { @type = "number" })
                }
            </div>
        </div>
        <br />
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Has Batteries?</h5>
            </div>
            <div class="cell large-6">
                <div class="mobile-app-toggle btn-has-batteries" data-mobile-app-toggle>
                    @if (Model.ShowUpdateRecord)
                    {
                        @Html.HiddenFor(m => m.UpdateItem.PowerSource.Battery.HasBatteries)
                    }
                    else
                    {
                        @Html.HiddenFor(m => m.NewItem.PowerSource.Battery.HasBatteries)
                    }
                    <a class="button no is-active">No</a>
                    <a class="button yes">Yes</a>
                </div>
            </div>
        </div>
    </fieldset>
    <br />
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Location</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.DropDownListFor(m => m.UpdateItem.LocationId, new SelectList(Model.LstLocations, "LocationId", "Name"), "Select a Location")
            }
            else
            {
                @Html.DropDownListFor(m => m.NewItem.LocationId, new SelectList(Model.LstLocations, "LocationId", "Name"), "Select a Location")
            }
        </div>
    </div>
    if (!Model.ShowUpdateRecord)
    {
        <br />
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Quantity</h5>
            </div>
            <div class="cell large-16">
                @Html.TextBoxFor(m => m.NewItem.Quantity, new { @type = "number" })
            </div>
        </div>
    }
}

@helper Hygiene()
{
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Item Name</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.TextBoxFor(m => m.UpdateItem.Name, new { placeholder = "Item Name" });
            }
            else
            {
                @Html.TextBoxFor(m => m.NewItem.Name, new { placeholder = "Item Name" });
            }
        </div>
    </div>
    <br />
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Category</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.DropDownListFor(m => m.UpdateItem.CategoryId, new SelectList(Model.LstCategories, "CategoryId", "Name"), "Select a Category")
            }
            else
            {
                @Html.DropDownListFor(m => m.NewItem.CategoryId, new SelectList(Model.LstCategories, "CategoryId", "Name"), "Select a Category")
            }
        </div>
    </div>
    <br />
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Gender</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.DropDownListFor(m => m.UpdateItem.GenderId, new SelectList(Model.LstGenders, "GenderId", "Name"), "Select Gender")
            }
            else
            {
                @Html.DropDownListFor(m => m.NewItem.GenderId, new SelectList(Model.LstGenders, "GenderId", "Name"), "Select Gender")
            }
        </div>
    </div>
    <br />
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Location</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.DropDownListFor(m => m.UpdateItem.LocationId, new SelectList(Model.LstLocations, "LocationId", "Name"), "Select a Location")
            }
            else
            {
                @Html.DropDownListFor(m => m.NewItem.LocationId, new SelectList(Model.LstLocations, "LocationId", "Name"), "Select a Location")
            }
        </div>
    </div>
    if (!Model.ShowUpdateRecord)
    {
        <br />
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Quantity</h5>
            </div>
            <div class="cell large-16">
                @Html.TextBoxFor(m => m.NewItem.Quantity, new { @type = "number" })
            </div>
        </div>
    }
}

@helper Miscellaneous()
{
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Item Name</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.TextBoxFor(m => m.UpdateItem.Name, new { placeholder = "Item Name" });
            }
            else
            {
                @Html.TextBoxFor(m => m.NewItem.Name, new { placeholder = "Item Name" });
            }
        </div>
    </div>
    <br />
    if (Model.ShowUpdateRecord)
    {
        if (Model.UpdateItem.PowerSource != null)
        {
            @Html.HiddenFor(m => m.UpdateItem.PowerSource.PowerSourceId)
            @Html.HiddenFor(m => m.UpdateItem.PowerSource.FuelId)
            @Html.HiddenFor(m => m.UpdateItem.PowerSource.BatteriesId)
        }
        @Html.HiddenFor(m => m.UpdateItem.PowerSource.Battery.BatteriesId)
    }

    <div class="grid-x grid-padding-x">
        <div class="cell large-12">
            <h5>Requires A/C Current?</h5>
        </div>
        <div class="cell large-6">
            <div class="mobile-app-toggle" data-mobile-app-toggle>
                @if (Model.ShowUpdateRecord)
                {
                    @Html.HiddenFor(m => m.UpdateItem.PowerSource.RequiresAC)
                }
                else
                {
                    @Html.HiddenFor(m => m.NewItem.PowerSource.RequiresAC)
                }
                <a class="button no is-active">No</a>
                <a class="button yes">Yes</a>
            </div>
        </div>
    </div>
    <div class="grid-x grid-padding-x">
        <div class="cell large-12">
            <h5>Requires Batteries</h5>
        </div>
        <div class="cell large-6">
            <div class="mobile-app-toggle btn-requires-batteries" data-mobile-app-toggle>
                @if (Model.ShowUpdateRecord)
                {
                    @Html.HiddenFor(m => m.UpdateItem.PowerSource.RequiresBatteries)
                }
                else
                {
                    @Html.HiddenFor(m => m.NewItem.PowerSource.RequiresBatteries)
                }
                <a class="button no is-active">No</a>
                <a class="button yes">Yes</a>
            </div>
        </div>
    </div>
    <fieldset id="pnl-batteries">
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Battery Type</h5>
            </div>
            <div class="cell large-16">
                @if (Model.ShowUpdateRecord)
                {
                    @Html.DropDownListFor(m => m.UpdateItem.PowerSource.Battery.BatteryTypeId, new SelectList(Model.LstBatteryTypes, "BatteryTypeId", "Name"), "Select a Battery Type")
                }
                else
                {
                    @Html.DropDownListFor(m => m.NewItem.PowerSource.Battery.BatteryTypeId, new SelectList(Model.LstBatteryTypes, "BatteryTypeId", "Name"), "Select a Battery Type")
                }
            </div>
        </div>
        <br />
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Quantity Needed</h5>
            </div>
            <div class="cell large-16">
                @if (Model.ShowUpdateRecord)
                {
                    @Html.TextBoxFor(m => m.UpdateItem.PowerSource.Battery.BatteryQuantity, new { @type = "number" })
                }
                else
                {
                    @Html.TextBoxFor(m => m.NewItem.PowerSource.Battery.BatteryQuantity, new { @type = "number" })
                }
            </div>
        </div>
        <br />
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Has Batteries?</h5>
            </div>
            <div class="cell large-6">
                <div class="mobile-app-toggle btn-has-batteries" data-mobile-app-toggle>
                    @if (Model.ShowUpdateRecord)
                    {
                        @Html.HiddenFor(m => m.UpdateItem.PowerSource.Battery.HasBatteries)
                    }
                    else
                    {
                        @Html.HiddenFor(m => m.NewItem.PowerSource.Battery.HasBatteries)
                    }
                    <a class="button no is-active">No</a>
                    <a class="button yes">Yes</a>
                </div>
            </div>
        </div>
    </fieldset>
    <br />
    if (Model.ShowUpdateRecord)
    {
        @Html.HiddenFor(m => m.UpdateItem.PowerSource.Fuel.FuelId)
    }

    <div class="grid-x grid-padding-x">
        <div class="cell large-12">
            <h5>Requires Fuel</h5>
        </div>
        <div class="cell large-6">
            <div class="mobile-app-toggle btn-requires-fuel" data-mobile-app-toggle>
                @if (Model.ShowUpdateRecord)
                {
                    @Html.HiddenFor(m => m.UpdateItem.PowerSource.RequiresFuel)
                }
                else
                {
                    @Html.HiddenFor(m => m.NewItem.PowerSource.RequiresFuel)
                }
                <a class="button no is-active">No</a>
                <a class="button yes">Yes</a>
            </div>
        </div>
    </div>
    <fieldset id="pnl-fuel">
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Fuel Type</h5>
            </div>
            <div class="cell large-16">
                @if (Model.ShowUpdateRecord)
                {
                    @Html.DropDownListFor(m => m.UpdateItem.PowerSource.Fuel.FuelTypeId, new SelectList(Model.LstFuelTypes, "FuelTypeId", "Name"), "Select a Fuel Type")
                }
                else
                {
                    @Html.DropDownListFor(m => m.NewItem.PowerSource.Fuel.FuelTypeId, new SelectList(Model.LstFuelTypes, "FuelTypeId", "Name"), "Select a Fuel Type")
                }
            </div>
        </div>
        <br />
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Has Fuel</h5>
            </div>
            <div class="cell large-6">
                <div class="mobile-app-toggle" data-mobile-app-toggle>
                    @if (Model.ShowUpdateRecord)
                    {
                        @Html.HiddenFor(m => m.UpdateItem.PowerSource.Fuel.HasFuel)
                    }
                    else
                    {
                        @Html.HiddenFor(m => m.NewItem.PowerSource.Fuel.HasFuel)
                    }
                    <a class="button no is-active">No</a>
                    <a class="button yes">Yes</a>
                </div>
            </div>

        </div>
    </fieldset>
    <br />
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Location</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.DropDownListFor(m => m.UpdateItem.LocationId, new SelectList(Model.LstLocations, "LocationId", "Name"), "Select a Location")
            }
            else
            {
                @Html.DropDownListFor(m => m.NewItem.LocationId, new SelectList(Model.LstLocations, "LocationId", "Name"), "Select a Location")
            }
        </div>
    </div>
    if (!Model.ShowUpdateRecord)
    {
        <br />
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Quantity</h5>
            </div>
            <div class="cell large-16">
                @Html.TextBoxFor(m => m.NewItem.Quantity, new { @type = "number" })
            </div>
        </div>
    }
}

@helper PetsAnimalCare()
{
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Item Name</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.TextBoxFor(m => m.UpdateItem.Name, new { placeholder = "Item Name" });
            }
            else
            {
                @Html.TextBoxFor(m => m.NewItem.Name, new { placeholder = "Item Name" });
            }
        </div>
    </div>
    <br />
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Category</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.DropDownListFor(m => m.UpdateItem.CategoryId, new SelectList(Model.LstCategories, "CategoryId", "Name"), "Select a Category")
            }
            else
            {
                @Html.DropDownListFor(m => m.NewItem.CategoryId, new SelectList(Model.LstCategories, "CategoryId", "Name"), "Select a Category")
            }
        </div>
    </div>
    <br />
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Expiration Date</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                if (Model.UpdateItem.ExpirationDate != null)
                {
                    @Html.TextBoxFor(m => m.UpdateItem.ExpirationDate, new { @type = "date", @Value = Model.UpdateItem.ExpirationDate.Value.ToString("yyyy-MM-dd") })
                }
                else
                {
                    @Html.TextBoxFor(m => m.UpdateItem.ExpirationDate, new { @type = "date" })
                }
            }
            else
            {
                @Html.TextBoxFor(m => m.NewItem.ExpirationDate, new { @type = "date" })
            }
        </div>
    </div>
    <br />
    if (Model.ShowUpdateRecord)
    {
        @Html.HiddenFor(m => m.UpdateItem.Volume.MeasurementStateId)
        @Html.HiddenFor(m => m.UpdateItem.Volume.VolumeId)
    }
    else
    {
        @Html.HiddenFor(m => m.NewItem.Volume.MeasurementStateId)
    }
    <div class="grid-x grid-padding-x">
        <div class="cell large-12">
            <h5>Measurement System</h5>
        </div>
        <div class="cell large-12">
            <div class="mobile-app-toggle btn-measurement-system" data-mobile-app-toggle>
                @if (Model.ShowUpdateRecord)
                {
                    @Html.HiddenFor(m => m.UpdateItem.Volume.MeasurementSystemId)
                }
                else
                {
                    @Html.HiddenFor(m => m.NewItem.Volume.MeasurementSystemId)
                }
                @foreach (var system in Model.LstMeasurementSystems)
                {
                    <a class="button" data-system-id="@system.MeasurementSystemId">@system.Type</a>
                }
            </div>
        </div>
    </div>
    <br />
    <div class="grid-x grid-padding-x">
        <div class="cell large-12 ddlMeasurementTypes">
            <h5>Measurement Type</h5>
            @if (Model.ShowUpdateRecord)
            {
                <div>
                    <select id="ddlMeasurementTypeId" name="@Html.NameFor(x => x.UpdateItem.Volume.MeasurementTypeId)" data-measurement-type-id="@Html.ValueFor(x => x.UpdateItem.Volume.MeasurementTypeId)">
                        <option value=""></option>
                        @foreach (var msrmnt in Model.LstMeasurementTypes)
                        {
                            <option value="@msrmnt.MeasurementTypeId" data-measurement-system-id="@msrmnt.MeasurementSystemId" data-measurement-state-id="@msrmnt.MeasurementStateId">@msrmnt.Type</option>
                        }
                    </select>
                </div>
            }
            else
            {
                <div>
                    <select id="ddlNewMeasurementTypeId" name="@Html.NameFor(x => x.NewItem.Volume.MeasurementTypeId)" data-measurement-type-id="">
                        <option value=""></option>
                        @foreach (var msrmnt in Model.LstMeasurementTypes)
                        {
                            <option value="@msrmnt.MeasurementTypeId" data-measurement-system-id="@msrmnt.MeasurementSystemId" data-measurement-state-id="@msrmnt.MeasurementStateId">@msrmnt.Type</option>
                        }
                    </select>
                </div>
            }
        </div>
        <div class="cell large-12">
            <h5>Units</h5>
            @*<input type="text" placeholder="#" />*@
            @if (Model.ShowUpdateRecord)
            {
                @Html.TextBoxFor(m => m.UpdateItem.Volume.Units, new { @type = "number" })
            }
            else
            {
                @Html.TextBoxFor(m => m.NewItem.Volume.Units, new { @type = "number" })
            }
        </div>
    </div>
    <br />
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Location</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.DropDownListFor(m => m.UpdateItem.LocationId, new SelectList(Model.LstLocations, "LocationId", "Name"), "Select a Location")
            }
            else
            {
                @Html.DropDownListFor(m => m.NewItem.LocationId, new SelectList(Model.LstLocations, "LocationId", "Name"), "Select a Location")
            }
        </div>
    </div>
    if (!Model.ShowUpdateRecord)
    {
        <br />
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Quantity</h5>
            </div>
            <div class="cell large-16">
                @Html.TextBoxFor(m => m.NewItem.Quantity, new { @type = "number" })
            </div>
        </div>
    }
}

@helper PowerFuel()
{
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Item Name</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.TextBoxFor(m => m.UpdateItem.Name, new { placeholder = "Item Name" });
            }
            else
            {
                @Html.TextBoxFor(m => m.NewItem.Name, new { placeholder = "Item Name" });
            }
        </div>
    </div>
    <br />
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Category</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.DropDownListFor(m => m.UpdateItem.CategoryId, new SelectList(Model.LstCategories, "CategoryId", "Name"), "Select a Category")
            }
            else
            {
                @Html.DropDownListFor(m => m.NewItem.CategoryId, new SelectList(Model.LstCategories, "CategoryId", "Name"), "Select a Category")
            }
        </div>
    </div>
    <br />
    if (Model.ShowUpdateRecord)
    {
        if (Model.UpdateItem.PowerSource != null)
        {
            @Html.HiddenFor(m => m.UpdateItem.PowerSource.PowerSourceId)
            @Html.HiddenFor(m => m.UpdateItem.PowerSource.FuelId)
            @Html.HiddenFor(m => m.UpdateItem.PowerSource.BatteriesId)
        }
        @Html.HiddenFor(m => m.UpdateItem.PowerSource.Battery.BatteriesId)
    }

    <div class="grid-x grid-padding-x">
        <div class="cell large-12">
            <h5>Requires A/C Current?</h5>
        </div>
        <div class="cell large-6">
            <div class="mobile-app-toggle" data-mobile-app-toggle>
                @if (Model.ShowUpdateRecord)
                {
                    @Html.HiddenFor(m => m.UpdateItem.PowerSource.RequiresAC)
                }
                else
                {
                    @Html.HiddenFor(m => m.NewItem.PowerSource.RequiresAC)
                }
                <a class="button no is-active">No</a>
                <a class="button yes">Yes</a>
            </div>
        </div>
    </div>
    <div class="grid-x grid-padding-x">
        <div class="cell large-12">
            <h5>Requires Batteries</h5>
        </div>
        <div class="cell large-6">
            <div class="mobile-app-toggle btn-requires-batteries" data-mobile-app-toggle>
                @if (Model.ShowUpdateRecord)
                {
                    @Html.HiddenFor(m => m.UpdateItem.PowerSource.RequiresBatteries)
                }
                else
                {
                    @Html.HiddenFor(m => m.NewItem.PowerSource.RequiresBatteries)
                }
                <a class="button no is-active">No</a>
                <a class="button yes">Yes</a>
            </div>
        </div>
    </div>
    <fieldset id="pnl-batteries">
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Battery Type</h5>
            </div>
            <div class="cell large-16">
                @if (Model.ShowUpdateRecord)
                {
                    @Html.DropDownListFor(m => m.UpdateItem.PowerSource.Battery.BatteryTypeId, new SelectList(Model.LstBatteryTypes, "BatteryTypeId", "Name"), "Select a Battery Type")
                }
                else
                {
                    @Html.DropDownListFor(m => m.NewItem.PowerSource.Battery.BatteryTypeId, new SelectList(Model.LstBatteryTypes, "BatteryTypeId", "Name"), "Select a Battery Type")
                }
            </div>
        </div>
        <br />
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Quantity Needed</h5>
            </div>
            <div class="cell large-16">
                @if (Model.ShowUpdateRecord)
                {
                    @Html.TextBoxFor(m => m.UpdateItem.PowerSource.Battery.BatteryQuantity, new { @type = "number" })
                }
                else
                {
                    @Html.TextBoxFor(m => m.NewItem.PowerSource.Battery.BatteryQuantity, new { @type = "number" })
                }
            </div>
        </div>
        <br />
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Has Batteries?</h5>
            </div>
            <div class="cell large-6">
                <div class="mobile-app-toggle btn-has-batteries" data-mobile-app-toggle>
                    @if (Model.ShowUpdateRecord)
                    {
                        @Html.HiddenFor(m => m.UpdateItem.PowerSource.Battery.HasBatteries)
                    }
                    else
                    {
                        @Html.HiddenFor(m => m.NewItem.PowerSource.Battery.HasBatteries)
                    }
                    <a class="button no is-active">No</a>
                    <a class="button yes">Yes</a>
                </div>
            </div>
        </div>
    </fieldset>
    <br />
    if (Model.ShowUpdateRecord)
    {
        @Html.HiddenFor(m => m.UpdateItem.PowerSource.Fuel.FuelId)
    }

    <div class="grid-x grid-padding-x">
        <div class="cell large-12">
            <h5>Requires Fuel</h5>
        </div>
        <div class="cell large-6">
            <div class="mobile-app-toggle btn-requires-fuel" data-mobile-app-toggle>
                @if (Model.ShowUpdateRecord)
                {
                    @Html.HiddenFor(m => m.UpdateItem.PowerSource.RequiresFuel)
                }
                else
                {
                    @Html.HiddenFor(m => m.NewItem.PowerSource.RequiresFuel)
                }
                <a class="button no is-active">No</a>
                <a class="button yes">Yes</a>
            </div>
        </div>
    </div>
    <fieldset id="pnl-fuel">
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Fuel Type</h5>
            </div>
            <div class="cell large-16">
                @if (Model.ShowUpdateRecord)
                {
                    @Html.DropDownListFor(m => m.UpdateItem.PowerSource.Fuel.FuelTypeId, new SelectList(Model.LstFuelTypes, "FuelTypeId", "Name"), "Select a Fuel Type")
                }
                else
                {
                    @Html.DropDownListFor(m => m.NewItem.PowerSource.Fuel.FuelTypeId, new SelectList(Model.LstFuelTypes, "FuelTypeId", "Name"), "Select a Fuel Type")
                }
            </div>
        </div>
        <br />
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Has Fuel</h5>
            </div>
            <div class="cell large-6">
                <div class="mobile-app-toggle" data-mobile-app-toggle>
                    @if (Model.ShowUpdateRecord)
                    {
                        @Html.HiddenFor(m => m.UpdateItem.PowerSource.Fuel.HasFuel)
                    }
                    else
                    {
                        @Html.HiddenFor(m => m.NewItem.PowerSource.Fuel.HasFuel)
                    }
                    <a class="button no is-active">No</a>
                    <a class="button yes">Yes</a>
                </div>
            </div>

        </div>
    </fieldset>
    <br />
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Location</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.DropDownListFor(m => m.UpdateItem.LocationId, new SelectList(Model.LstLocations, "LocationId", "Name"), "Select a Location")
            }
            else
            {
                @Html.DropDownListFor(m => m.NewItem.LocationId, new SelectList(Model.LstLocations, "LocationId", "Name"), "Select a Location")
            }
        </div>
    </div>
    if (!Model.ShowUpdateRecord)
    {
        <br />
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Quantity</h5>
            </div>
            <div class="cell large-16">
                @Html.TextBoxFor(m => m.NewItem.Quantity, new { @type = "number" })
            </div>
        </div>
    }
}

@helper SecurityDefense()
{
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Item Name</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.TextBoxFor(m => m.UpdateItem.Name, new { placeholder = "Item Name" });
            }
            else
            {
                @Html.TextBoxFor(m => m.NewItem.Name, new { placeholder = "Item Name" });
            }
        </div>
    </div>
    <br />
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Category</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.DropDownListFor(m => m.UpdateItem.CategoryId, new SelectList(Model.LstCategories, "CategoryId", "Name"), "Select a Category")
            }
            else
            {
                @Html.DropDownListFor(m => m.NewItem.CategoryId, new SelectList(Model.LstCategories, "CategoryId", "Name"), "Select a Category")
            }
        </div>
    </div>
    <br />
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Location</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.DropDownListFor(m => m.UpdateItem.LocationId, new SelectList(Model.LstLocations, "LocationId", "Name"), "Select a Location")
            }
            else
            {
                @Html.DropDownListFor(m => m.NewItem.LocationId, new SelectList(Model.LstLocations, "LocationId", "Name"), "Select a Location")
            }
        </div>
    </div>
    if (!Model.ShowUpdateRecord)
    {
        <br />
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Quantity</h5>
            </div>
            <div class="cell large-16">
                @Html.TextBoxFor(m => m.NewItem.Quantity, new { @type = "number" })
            </div>
        </div>
    }
}

@helper ShelterCamping()
{
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Item Name</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.TextBoxFor(m => m.UpdateItem.Name, new { placeholder = "Item Name" });
            }
            else
            {
                @Html.TextBoxFor(m => m.NewItem.Name, new { placeholder = "Item Name" });
            }
        </div>
    </div>
    <br />
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Category</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.DropDownListFor(m => m.UpdateItem.CategoryId, new SelectList(Model.LstCategories, "CategoryId", "Name"), "Select a Category")
            }
            else
            {
                @Html.DropDownListFor(m => m.NewItem.CategoryId, new SelectList(Model.LstCategories, "CategoryId", "Name"), "Select a Category")
            }
        </div>
    </div>
    <br />
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Location</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.DropDownListFor(m => m.UpdateItem.LocationId, new SelectList(Model.LstLocations, "LocationId", "Name"), "Select a Location")
            }
            else
            {
                @Html.DropDownListFor(m => m.NewItem.LocationId, new SelectList(Model.LstLocations, "LocationId", "Name"), "Select a Location")
            }
        </div>
    </div>
    if (!Model.ShowUpdateRecord)
    {
        <br />
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Quantity</h5>
            </div>
            <div class="cell large-16">
                @Html.TextBoxFor(m => m.NewItem.Quantity, new { @type = "number" })
            </div>
        </div>
    }
}

@helper SpiritualNeeds()
{
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Item Name</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.TextBoxFor(m => m.UpdateItem.Name, new { placeholder = "Item Name" });
            }
            else
            {
                @Html.TextBoxFor(m => m.NewItem.Name, new { placeholder = "Item Name" });
            }
        </div>
    </div>
    <br />
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Category</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.DropDownListFor(m => m.UpdateItem.CategoryId, new SelectList(Model.LstCategories, "CategoryId", "Name"), "Select a Category")
            }
            else
            {
                @Html.DropDownListFor(m => m.NewItem.CategoryId, new SelectList(Model.LstCategories, "CategoryId", "Name"), "Select a Category")
            }
        </div>
    </div>
    <br />
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Location</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.DropDownListFor(m => m.UpdateItem.LocationId, new SelectList(Model.LstLocations, "LocationId", "Name"), "Select a Location")
            }
            else
            {
                @Html.DropDownListFor(m => m.NewItem.LocationId, new SelectList(Model.LstLocations, "LocationId", "Name"), "Select a Location")
            }
        </div>
    </div>
    if (!Model.ShowUpdateRecord)
    {
        <br />
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Quantity</h5>
            </div>
            <div class="cell large-16">
                @Html.TextBoxFor(m => m.NewItem.Quantity, new { @type = "number" })
            </div>
        </div>
    }
}

@helper ToolsHardware()
{
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Item Name</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.TextBoxFor(m => m.UpdateItem.Name, new { placeholder = "Item Name" });
            }
            else
            {
                @Html.TextBoxFor(m => m.NewItem.Name, new { placeholder = "Item Name" });
            }
        </div>
    </div>
    <br />
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Category</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.DropDownListFor(m => m.UpdateItem.CategoryId, new SelectList(Model.LstCategories, "CategoryId", "Name"), "Select a Category")
            }
            else
            {
                @Html.DropDownListFor(m => m.NewItem.CategoryId, new SelectList(Model.LstCategories, "CategoryId", "Name"), "Select a Category")
            }
        </div>
    </div>
    <br />
    if (Model.ShowUpdateRecord)
    {
        if (Model.UpdateItem.PowerSource != null)
        {
            @Html.HiddenFor(m => m.UpdateItem.PowerSource.PowerSourceId)
            @Html.HiddenFor(m => m.UpdateItem.PowerSource.FuelId)
            @Html.HiddenFor(m => m.UpdateItem.PowerSource.BatteriesId)
        }
        @Html.HiddenFor(m => m.UpdateItem.PowerSource.Battery.BatteriesId)
    }

    <div class="grid-x grid-padding-x">
        <div class="cell large-12">
            <h5>Requires A/C Current?</h5>
        </div>
        <div class="cell large-6">
            <div class="mobile-app-toggle" data-mobile-app-toggle>
                @if (Model.ShowUpdateRecord)
                {
                    @Html.HiddenFor(m => m.UpdateItem.PowerSource.RequiresAC)
                }
                else
                {
                    @Html.HiddenFor(m => m.NewItem.PowerSource.RequiresAC)
                }
                <a class="button no is-active">No</a>
                <a class="button yes">Yes</a>
            </div>
        </div>
    </div>
    <div class="grid-x grid-padding-x">
        <div class="cell large-12">
            <h5>Requires Batteries</h5>
        </div>
        <div class="cell large-6">
            <div class="mobile-app-toggle btn-requires-batteries" data-mobile-app-toggle>
                @if (Model.ShowUpdateRecord)
                {
                    @Html.HiddenFor(m => m.UpdateItem.PowerSource.RequiresBatteries)
                }
                else
                {
                    @Html.HiddenFor(m => m.NewItem.PowerSource.RequiresBatteries)
                }
                <a class="button no is-active">No</a>
                <a class="button yes">Yes</a>
            </div>
        </div>
    </div>
    <fieldset id="pnl-batteries">
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Battery Type</h5>
            </div>
            <div class="cell large-16">
                @if (Model.ShowUpdateRecord)
                {
                    @Html.DropDownListFor(m => m.UpdateItem.PowerSource.Battery.BatteryTypeId, new SelectList(Model.LstBatteryTypes, "BatteryTypeId", "Name"), "Select a Battery Type")
                }
                else
                {
                    @Html.DropDownListFor(m => m.NewItem.PowerSource.Battery.BatteryTypeId, new SelectList(Model.LstBatteryTypes, "BatteryTypeId", "Name"), "Select a Battery Type")
                }
            </div>
        </div>
        <br />
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Quantity Needed</h5>
            </div>
            <div class="cell large-16">
                @if (Model.ShowUpdateRecord)
                {
                    @Html.TextBoxFor(m => m.UpdateItem.PowerSource.Battery.BatteryQuantity, new { @type = "number" })
                }
                else
                {
                    @Html.TextBoxFor(m => m.NewItem.PowerSource.Battery.BatteryQuantity, new { @type = "number" })
                }
            </div>
        </div>
        <br />
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Has Batteries?</h5>
            </div>
            <div class="cell large-6">
                <div class="mobile-app-toggle btn-has-batteries" data-mobile-app-toggle>
                    @if (Model.ShowUpdateRecord)
                    {
                        @Html.HiddenFor(m => m.UpdateItem.PowerSource.Battery.HasBatteries)
                    }
                    else
                    {
                        @Html.HiddenFor(m => m.NewItem.PowerSource.Battery.HasBatteries)
                    }
                    <a class="button no is-active">No</a>
                    <a class="button yes">Yes</a>
                </div>
            </div>
        </div>
    </fieldset>
    <br />
    if (Model.ShowUpdateRecord)
    {
        @Html.HiddenFor(m => m.UpdateItem.PowerSource.Fuel.FuelId)
    }

    <div class="grid-x grid-padding-x">
        <div class="cell large-12">
            <h5>Requires Fuel</h5>
        </div>
        <div class="cell large-6">
            <div class="mobile-app-toggle btn-requires-fuel" data-mobile-app-toggle>
                @if (Model.ShowUpdateRecord)
                {
                    @Html.HiddenFor(m => m.UpdateItem.PowerSource.RequiresFuel)
                }
                else
                {
                    @Html.HiddenFor(m => m.NewItem.PowerSource.RequiresFuel)
                }
                <a class="button no is-active">No</a>
                <a class="button yes">Yes</a>
            </div>
        </div>
    </div>
    <fieldset id="pnl-fuel">
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Fuel Type</h5>
            </div>
            <div class="cell large-16">
                @if (Model.ShowUpdateRecord)
                {
                    @Html.DropDownListFor(m => m.UpdateItem.PowerSource.Fuel.FuelTypeId, new SelectList(Model.LstFuelTypes, "FuelTypeId", "Name"), "Select a Fuel Type")
                }
                else
                {
                    @Html.DropDownListFor(m => m.NewItem.PowerSource.Fuel.FuelTypeId, new SelectList(Model.LstFuelTypes, "FuelTypeId", "Name"), "Select a Fuel Type")
                }
            </div>
        </div>
        <br />
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Has Fuel</h5>
            </div>
            <div class="cell large-6">
                <div class="mobile-app-toggle" data-mobile-app-toggle>
                    @if (Model.ShowUpdateRecord)
                    {
                        @Html.HiddenFor(m => m.UpdateItem.PowerSource.Fuel.HasFuel)
                    }
                    else
                    {
                        @Html.HiddenFor(m => m.NewItem.PowerSource.Fuel.HasFuel)
                    }
                    <a class="button no is-active">No</a>
                    <a class="button yes">Yes</a>
                </div>
            </div>

        </div>
    </fieldset>
    <br />
    <div class="grid-x grid-padding-x">
        <div class="cell large-8">
            <h5>Location</h5>
        </div>
        <div class="cell large-16">
            @if (Model.ShowUpdateRecord)
            {
                @Html.DropDownListFor(m => m.UpdateItem.LocationId, new SelectList(Model.LstLocations, "LocationId", "Name"), "Select a Location")
            }
            else
            {
                @Html.DropDownListFor(m => m.NewItem.LocationId, new SelectList(Model.LstLocations, "LocationId", "Name"), "Select a Location")
            }
        </div>
    </div>
    if (!Model.ShowUpdateRecord)
    {
        <br />
        <div class="grid-x grid-padding-x">
            <div class="cell large-8">
                <h5>Quantity</h5>
            </div>
            <div class="cell large-16">
                @Html.TextBoxFor(m => m.NewItem.Quantity, new { @type = "number" })
            </div>
        </div>
    }
}