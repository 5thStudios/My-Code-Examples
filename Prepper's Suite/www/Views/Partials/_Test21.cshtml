@using ScrumTests.Controllers;
@using ScrumTests.Models;
@inherits Umbraco.Web.Mvc.UmbracoViewPage<AllCards>



@using (Html.BeginUmbracoForm<GeneralController>("FormUpdate_21", FormMethod.Post, new { id = "FormUpdate" }))
{
    <div class="grid-x grid-padding-x grid-padding-y  flex-child-auto">
        <div class="cell">
            @Html.AntiForgeryToken()
            @HiddenFields()
            <div class="grid-x grid-margin-x scrum-columns">
                @for (int i = 0; i < Model.LstCardGroups.Count; i++)
                {
                    @CardColumn(i)
                }
            </div>
            @Html.ValidationSummary(false, "")
        </div>
    </div>

    <div class="side-pnl add-card hide-pnl">
        @PnlAddCard()
    </div>
    <div class="side-pnl update-card hide-pnl">
        @PnlUpdateCard()
    </div>
    <div class="side-pnl delete-card hide-pnl">
        @PnlDeleteCard()
    </div>
}


@helper PnlAddCard()
{
    <div id="PnlAddCard" class="grid-x grid-padding-x grid-padding-y">
        <div class="cell">
            @Html.HiddenFor(m => m.AddCard, new { @class = "hfldAddCard" })
            @Html.HiddenFor(m => m.VirtualCard.ColumnId, new { @class = "hfldAddColumnId" })
            @Html.HiddenFor(m => m.VirtualCard.SortId, new { @class = "hfldAddSortId" })

            <h2 class="text-right">New Card</h2>
            <br />

            <div class="grid-x grid-padding-x">
                <div class="cell large-6">&nbsp;</div>
                <div class="cell large-12 text-center">
                    <div class="mobile-app-toggle btns-new-card-type" data-mobile-app-toggle>
                        <input type="hidden" id="hfldCustomType" value="true" />
                        <a for="pnl-custom" class="button custom is-active">Custom</a>
                        <a for="pnl-predefined" class="button predefined">Predefined</a>
                    </div>
                </div>
            </div>
            <br />

            <div id="pnl-custom">
                <div class="grid-x grid-padding-x">
                    <div class="cell large-8">
                        <h4>Card Title</h4>
                    </div>
                    <div class="cell large-16">
                        @Html.TextBoxFor(m => m.VirtualCard.CardName, new { @class = "hfldAddCardName" })
                    </div>
                </div>
            </div>

            <div id="pnl-predefined">
                <div class="grid-x grid-padding-x">
                    <div class="cell large-8">
                        <h4>Select</h4>
                    </div>
                    <div class="cell large-16">
                        <select>
                            @foreach (Card _card in Model.LstPredefinedCards)
                            {
                                <option value="@_card.CardName">@_card.CardName</option>
                            }
                        </select>
                    </div>
                </div>
            </div>

            <br />
            <br />
            <div class="grid-x grid-padding-x">
                <div class="cell large-6 large-offset-12">
                    <a class="button expanded large submit">Submit</a>
                </div>
                <div class="cell large-6">
                    <a class="button expanded large cancel">Cancel</a>
                </div>
            </div>
        </div>
    </div>
}
@helper PnlUpdateCard()
{
    <div id="PnlUpdateCard">
        <div class="grid-x grid-padding-x grid-padding-y">
            <div class="cell">
                <input type="hidden" id="HfldTemp_CardId" />
                <input type="hidden" id="HfldTemp_UniqueCardName" />

                <h2 class="text-right">Update Card</h2>
                <br />

                <div id="pnl-custom">
                    <div class="grid-x grid-padding-x">
                        <div class="cell large-8">
                            <h4>Card Title</h4>
                        </div>
                        <div class="cell large-16">
                            <input type="text" id="txbUpdateCardName" />
                        </div>
                    </div>
                </div>

                <br />
                <br />
                <div class="grid-x grid-padding-x">
                    <div class="cell large-6 large-offset-6">
                        <a class="button expanded large submit">Submit</a>
                    </div>
                    <div class="cell large-6">
                        <a class="button expanded large cancel">Cancel</a>
                    </div>
                    <div class="cell large-6">
                        <a class="button expanded large delete">Delete</a>
                    </div>
                </div>
            </div>
        </div>
    </div>

}
@helper PnlDeleteCard()
{
    <div id="PnlConfirmDeletion">
        <div class="grid-x grid-padding-x grid-padding-y">
            <div class="cell">
                <h2 class="text-right">Confirm Deletion</h2>
                <br />
                <br />

                <h3>Are you sure?</h3>
                <h4>This option is permenant and cannot be undone.</h4>
                <br />
                <br />
                <div class="grid-x grid-padding-x">
                    <div class="cell large-6 large-offset-12">
                        <a class="button expanded large cancel">Cancel</a>
                    </div>
                    <div class="cell large-6">
                        <a class="button expanded large delete">Delete</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
@helper HiddenFields()
{
    <div class="hide hiddenFields">
        @*@Html.HiddenFor(m => m.DeleteCard, new { @class = "hfldDeleteCard" })*@
        @Html.HiddenFor(m => m.DeleteCardId, new { @class = "hfldDeleteCardId" })

        @for (int i = 0; i < Model.LstCardGroups.Count; i++)
        {
            <div class="column">
                @Html.HiddenFor(m => m.LstCardGroups[i].ColumnId, new { @class = "hfldColumnId" })
                @Html.HiddenFor(m => m.LstCardGroups[i].ColumnName, new { @class = "hfldColumnName" })
                @Html.HiddenFor(m => m.LstCardGroups[i].ColumnColor, new { @class = "hfldColumnColor" })

                @{
                    for (int j = 0; j < Model.LstCardGroups[i].LstCards.Count; j++)
                    {
                        string uniqueCardName = "card-" + @Model.LstCardGroups[i].LstCards[j].CardId;
                        <div class="card">
                            @Html.HiddenFor(m => m.LstCardGroups[i].LstCards[j].CardName, new { @class = "hfldCardName " + @uniqueCardName })
                            @Html.HiddenFor(m => m.LstCardGroups[i].LstCards[j].CardId, new { @class = "hfldCardId " + @uniqueCardName })
                            @Html.HiddenFor(m => m.LstCardGroups[i].LstCards[j].ColumnId, new { @class = "hfldCardColumnId " + @uniqueCardName })
                            @Html.HiddenFor(m => m.LstCardGroups[i].LstCards[j].SortId, new { @class = "hfldSortId " + @uniqueCardName })
                        </div>
                    }
                }
            </div>
        }
    </div>
}
@helper CardColumn(int i)
{
    <div class="cell large-4">
        <div class="column-header" style="border-color: @Model.LstCardGroups[i].ColumnColor;">
            @Model.LstCardGroups[i].ColumnName (@Model.LstCardGroups[i].LstCards.Count)
        </div>

        <div class="sortable connectedSortable" data-column-id="@Model.LstCardGroups[i].ColumnId">
            @{
                for (int j = 0; j < Model.LstCardGroups[i].LstCards.Count; j++)
                {
                    @Card(i, j)
                }
            }
        </div>

        <div class="add-new-card" data-column-id="@Model.LstCardGroups[i].ColumnId" data-next-sort-index="@Model.LstCardGroups[i].LstCards.Count()">
            + Add New
        </div>

    </div>
}
@helper Card(int i, int j)
{
    string uniqueCardName = "card-" + @Model.LstCardGroups[i].LstCards[j].CardId;

    <div class="card bugout-bag" id="@uniqueCardName" data-card-id="@Model.LstCardGroups[i].LstCards[j].CardId" data-column-id="@Model.LstCardGroups[i].LstCards[j].ColumnId" data-sort-id="@Model.LstCardGroups[i].LstCards[j].SortId" data-title="@Model.LstCardGroups[i].LstCards[j].CardName">
        <div class="card-header">
            <div class="card-title">
                <span class="icon"><i class="fas fa-hiking text-center"></i></span>Categories
            </div>
        </div>
        <div class="card-content">
            <div class="title">
                @Model.LstCardGroups[i].LstCards[j].CardName
            </div>
            <div class="content">
                This card makes use of the card-divider element.
                This card makes use of the card-divider element.
            </div>
        </div>
        <div class="card-footer">
            <div class="date">
                <i class="far fa-calendar-alt"></i>
                Apr 1
            </div>
            <div class="comments">
                <i class="far fa-comment-alt"></i>
                2
            </div>
            <div class="checklist">
                <i class="fas fa-tasks"></i>
                2/4
            </div>
        </div>
    </div>
}
